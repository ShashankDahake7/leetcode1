/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *prev, *first, *second;
    void inorder(TreeNode* root){
        if(root == NULL){
            return;
        }
        inorder(root->left);
        // Check if the previous node is greater than the current node
        if (prev && prev->val >= root->val) {
            if (!first) {
                // Found the first incorrect node
                first = prev;
            }
            // Update the second incorrect node
            second = root;
        }
        // Update the previous node
        prev = root;
        inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
        prev = NULL;
        first = NULL;
        second = NULL;   
        inorder(root);
        // Swap the values of the first and second incorrect nodes
        swap(first->val, second->val);
    }
};
