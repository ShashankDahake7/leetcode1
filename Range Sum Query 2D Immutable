class NumMatrix {
public:
    vector<vector<int>> prefixSum;
    NumMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        prefixSum.resize(m);
        for (int i = 0; i < m; i++) {
            prefixSum[i].resize(n);
        }
        // Preprocessing, calculate prefix sums
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                prefixSum[i][j] = matrix[i][j];
                if (i > 0)
                    prefixSum[i][j] += prefixSum[i - 1][j];
                if (j > 0)
                    prefixSum[i][j] += prefixSum[i][j - 1];
                if (i > 0 && j > 0)
                    // in order not to store twice values from [0][0] to matrix[i - 1][j - 1]
                    prefixSum[i][j] -= prefixSum[i - 1][j - 1]; 
            }
        }
    }
    int sumRegion(int row1, int col1, int row2, int col2) {
        int res = prefixSum[row2][col2];
        if (row1 - 1 >= 0)
            res -= prefixSum[row1 - 1][col2];
        if (col1 - 1 >= 0)
            res -= prefixSum[row2][col1 - 1];
        if (row1 - 1 >= 0 && col1 - 1 >= 0)
            // in order not to subtract twice values from [0][0] to matrix[i - 1][j - 1]
            res += prefixSum[row1 - 1][col1 - 1];
        return res;
    }
};
