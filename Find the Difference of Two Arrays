// Method-1
class Solution {
public:
    vector<int> solve(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> onlyInNums1;
        for (int num : nums1) {
            bool existInNums2 = false;
            for (int x : nums2) {
                if (x == num) {
                    existInNums2 = true;
                    break;
                }
            }
            if (!existInNums2) {
                onlyInNums1.insert(num);
            }
        }
        return vector<int> (onlyInNums1.begin(), onlyInNums1.end());
    }
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        return {solve(nums1, nums2), solve(nums2, nums1)};
    }
};

// Method-2
class Solution {
public:
    vector<int> solve(vector<int>& nums1, vector<int>& nums2){
        unordered_set<int> onlyInNums1;
        sort(nums2.begin(), nums2.end());
        for(int i : nums1){
            if(!binSearch(nums2, i)) {   
                onlyInNums1.insert(i);
            }
        }
        return vector<int> (onlyInNums1.begin(), onlyInNums1.end());
    }
    bool binSearch(vector<int>& nums, int k){
        int s = 0;
        int e = nums.size() - 1;
        while(s <= e){
            int mid = s + (e - s) / 2;
            if(nums[mid] > k) {
                e = mid - 1;
            }
            else if(nums[mid] == k) {
                return true;
            }
            else {
                s = mid + 1;
            }
        }
        return false;
    }
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        return {solve(nums1, nums2), solve(nums2, nums1)};
    }
};

// Method-3
class Solution {
public:
    vector<int> solve(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> onlyInNums1;
        unordered_set<int> existsInNums2;
        for (int num : nums2) {
            existsInNums2.insert(num);
        }
        for (int num : nums1) {
            if (existsInNums2.find(num) == existsInNums2.end()) {
                onlyInNums1.insert(num);
            }
        }
        return vector<int> (onlyInNums1.begin(), onlyInNums1.end());
    }
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        return {solve(nums1, nums2), solve(nums2, nums1)};
    }
};
