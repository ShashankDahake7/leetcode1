// Method-1
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans;
        for (int i = 0; i < n - k + 1; ++i) {
            int max_val = nums[i];
            for (int j = i + 1; j < i + k; ++j) {
                max_val = max(max_val, nums[j]);
            }
            ans.push_back(max_val);
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> dq;
        vector<int> ans;
        for(int i = 0; i < n; i++){
            while(!dq.empty() && dq.front() <= (i - k)){
                dq.pop_front();
            }
            while(!dq.empty() && nums[i] > nums[dq.back()]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i >= k - 1){
                ans.push_back(nums[dq.front()]);
            }
        }
        return ans;
    }
};
