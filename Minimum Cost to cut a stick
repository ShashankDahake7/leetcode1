// Method - 1 [Recursion]
// T->O(Expo) && S->O(n) [Recusion Stack Sapce]
class Solution
{
public:
    int f(int i, int j, vector<int> &cuts)
    {
        if (i > j)
            return 0;
        int mini = 1e9;
        for (int ind = i; ind <= j; ind++)
        {
            int cost = cuts[j + 1] - cuts[i - 1] + f(i, ind - 1, cuts) + f(ind + 1, j, cuts);
            mini = min(mini, cost);
        }
        return mini;
    }

    int minCost(int n, vector<int> &cuts)
    {
        cuts.insert(cuts.begin(), 0);
        cuts.insert(cuts.end(), n);
        sort(cuts.begin(), cuts.end());
        return f(1, cuts.size() - 2, cuts);
    }
};

// Method -2 [Memoization]
// T->O(m^3) && S->O(m^2) +O(n) [Recursion Stack Space]
class Solution
{
public:
    int f(int i, int j, vector<int> &cuts, vector<vector<int>> &dp)
    {
        if (i > j)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int mini = 1e9;
        for (int ind = i; ind <= j; ind++)
        {
            int cost = cuts[j + 1] - cuts[i - 1] + f(i, ind - 1, cuts, dp) + f(ind + 1, j, cuts, dp);
            mini = min(mini, cost);
        }
        return dp[i][j] = mini;
    }
    int minCost(int n, vector<int> &cuts)
    {
        cuts.insert(cuts.begin(), 0);
        cuts.insert(cuts.end(), n);
        sort(cuts.begin(), cuts.end());
        int m = cuts.size();
        vector<vector<int>> dp(m + 1, vector<int>(m + 1, -1));
        return f(1, cuts.size() - 2, cuts, dp);
    }
};

// Method - 3 [Tabulation]
// T->O(m^3) && S->O(m^2)
class Solution
{
public:
    int minCost(int n, vector<int> &cuts)
    {
        cuts.insert(cuts.begin(), 0);
        cuts.insert(cuts.end(), n);
        sort(cuts.begin(), cuts.end());
        int m = cuts.size();
        vector<vector<int>> dp(m, vector<int>(m, 0));
        for (int i = m - 1; i >= 1; i--)
        {
            for (int j = i; j <= m - 2; j++)
            {
                int mini = 1e9;
                for (int ind = i; ind <= j; ind++)
                {
                    int cost = cuts[j + 1] - cuts[i - 1] + dp[i][ind - 1] + dp[ind + 1][j];
                    mini = min(mini, cost);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][cuts.size() - 2];
    }
};
