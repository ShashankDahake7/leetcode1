// Method-1
class Solution {
public:
    bool checkIfExist(vector<int>& arr) {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        for(int i = 0; i < n; i++){
            int l = 0, r = n - 1;
            while(l<=r){
                int mid = (l + r) / 2;
                if((arr[i] == 2 * arr[mid]) && (i == mid)){
                    break;
                }
                else if(arr[i] == 2 * arr[mid]){
                    return true;
                }
                else if(arr[i] > 2 * arr[mid]){
                    l = mid + 1;
                }
                else if(arr[i] < 2 * arr[mid]){
                    r = mid - 1;
                }
            }
        }
        return false;
    }
};

// Method-2
class Solution {
public:
    bool checkIfExist(vector<int>& arr) {
        unordered_set<int> s;
        for(int i = 0; i < arr.size(); i++){
            if(s.find(arr[i] * 2) != s.end()){
                return true;
            }
            if(arr[i] % 2 == 0){
                if(s.find(arr[i] / 2) != s.end()){
                    return true;
                }
            }
            s.insert(arr[i]);
        }
        return false;
    }
};
