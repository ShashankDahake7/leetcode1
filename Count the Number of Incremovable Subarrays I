// Method-1
class Solution {
public:
    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size(), ans = 0;       
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                bool ok = true; 
                int lst = -1;
                for (int k = 0; k < n; k++) {
                    if (k >= i && k <= j) {} 
                    else {
                        // Check if the current element is greater than the last one
                        ok &= (lst < nums[k]); 
                        lst = nums[k];
                    }
                }
                ans += ok;
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();
        if(n == 1){
            return 1;
        }
        if(n == 2){
            return 3;
        }
        int res = 1, left = 0;
        while(left < n - 1 && nums[left] < nums[left + 1]){
            left++;
        }
        res += (left + 1);
        int right = n - 1;
        while(right > 0 && nums[right - 1] < nums[right]){
            right--;
        }
        res += (n - right);
        if(left >= right){
            return n * (n + 1) / 2;
        }
        left = 0;
        while(left < right && right < n){
            if(nums[left] < nums[right]){
                if(right == n - 1){
                    res++;
                }
                else{
                    res += (n - right);
                }
                if(left < n - 1 && nums[left] < nums[left + 1]){
                    left++;
                }
                else{
                    break;
                }
            }
            else{
                right++;
            }
        }
        return res;
    }
};
