// Method-1
class Solution{
public:
    int countQuadruplets(vector<int>& arr) {
        int c = 0, n = arr.size();
        for(int i = 0; i < n - 3; i++){
            for(int j = i + 1; j < n - 2; j++){
                for(int k = j + 1; k < n - 1; k++){
                    for(int l = k + 1; l < n; l++){
                        if(arr[i] + arr[j] + arr[k] == arr[l]){
                            c++;
                        }
                    }
                }
            }
        }
        return c;
    }
};

// Method-2
class Solution{
public:
    int countQuadruplets(vector<int>& arr) {
        int c = 0, n = arr.size();
        map<int,int> mp;
        for(int i = n - 1; i >= 2; i--){
            for(int j = i - 1; j >= 1; j--){
                for(int k = j - 1; k >= 0; k--){  
                    if(mp[arr[i] + arr[j] + arr[k]])
                        c += mp[arr[i] + arr[j] + arr[k]];
                }
            }
            mp[arr[i]]++; 
        }
        return c;
    }
};

// Method-3
class Solution{
public:
    int countQuadruplets(vector<int>& arr) {
        int c = 0, n = arr.size();
        map<int,int> mp;
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                mp[arr[i] + arr[j]]++;
            }
            for(int k = i + 2; k < n; k++){
                c += mp[arr[k] - arr[i + 1]];
            }
        }
        return c;
    }
};
