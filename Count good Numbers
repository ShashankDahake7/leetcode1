class Solution {
    // At even indices there can be 5 values(0,2,4,6,8) i.e. all even numbers 0 to 9
    // And At odd indices there can 4 values(2,3,5,7) i.e. all prime numbers 0 to 9
    // Total number of good digit strings would be  (5 ^ even indices) * (4 ^ odd indices)
    // We also need to return  % 10^9 + 7.
public:
    long long powerMod(int a, long long b, int mod) {
        if(b == 0)
            return 1;
        long long x = powerMod(a, b/2, mod);
        // Case 1 - b is even
        // a^b can written as (a^(b/2)) * (a ^ (b/2))
        if(b % 2 == 0)
            return (x * x) % mod;
        // Case 2 - b is odd
        // a^b can be re-written as (a^(b/2)) * (a^(b/2)) * a
        else
            return (((a * x) % mod) * x) % mod;
    }
    
    int countGoodNumbers(long long n) {
        int mod = 1e9+7;
        return (powerMod(5, (n + 1) / 2, mod) * powerMod(4, n / 2, mod)) % mod;
    }
};
