// Method-1
class Solution {
public:
    int canBeTypedWords(string text, string brokenLetters) {
        vector<string> temp;
        int n = text.length();
        int start = 0, i = 0;
        for (i = 0; i < text.length(); i++) {
            if (text[i] == ' ') {
                string words = text.substr(start, i - start);
                temp.push_back(words);
                start = i + 1;
            }
        }
        string words = text.substr(start, n - start);
        temp.push_back(words);
        int count = 0;
        vector<int> freq(26, 0);
        for (int j = 0; j < brokenLetters.size(); j++) {
            char singleChar = brokenLetters[j];
            int singleCharInt = singleChar - 'a';
            freq[singleCharInt]++;
        }
        for (int j = 0; j < temp.size(); j++) {
            string textWord = temp[j];
            int x = 0;
            for (x = 0; x < textWord.size(); x++) {
                int tempVar = textWord[x] - 'a';
                if (freq[tempVar] != 0) {
                    break;
                }
            }
            if (x == textWord.size()) {
                count++;
            }
        }
        return count;
    }
};

// Method-2
class Solution {
public:
    int canBeTypedWords(string text, string brokenLetters) {
        vector<int> ch(26, 0);
        // store the broken letters in ch vector
        for (char c : brokenLetters) {
            ch[c - 'a'] = 1;
        }
        int cnt = 0, ans = 0;
        // traversing the text string
        for (int i = 0; i < text.length(); i++) {
            // if char is ' ' means that we got a new word
            if (text[i] == ' ') {
                // cnt remain 0 means that there is no broken letter in this
                // word
                if (cnt == 0) {
                    ans++;
                }
                cnt = 0; // reinitialize cnt to 0 as new word start from here
            }
            // if char is present in ch then just increment the cnt
            else if (ch[text[i] - 'a'] == 1) {
                cnt++;
            }
        }
        // for last word in string
        if (cnt == 0) {
            ans++;
        }
        return ans;
    }
};
