// Method-1
class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        unordered_set<int> s;
        for (auto x : nums){
            s.insert(x);
        }
        s.erase(0);
        return s.size();
    }
};

// Method-2
class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        map<int,int> mp;
        for(auto i: nums){
            if(i==0){
              continue;
            }  
            mp[i]++;
        }
        return mp.size();
    }
};

// Method-3
class Solution {
public:
    int fun(vector<int>& nums,int &count){
        int mini=INT_MAX;
        count++;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0){
                mini=min(mini,nums[i]);
            }
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0){
                nums[i]-=mini;
            }
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){
                fun(nums,count);
            }
        }
        return count;
    }
    int minimumOperations(vector<int>& nums) {   
        if(nums.size()==1 && nums[0]==0){
            return 0;
        }
        int count=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){
                return fun(nums,count);
            }
        }
        return count;
    }
};
