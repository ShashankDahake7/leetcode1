// BFS
class Solution {
public:
    bool bfs(int node, vector<vector<int>>& graph, vector<int>& color, vector<int>& vis) {
        queue<int> q;
        q.push(node);
        vis[node] = 1;
        color[node] = 1;
        while (!q.empty()) {
            int curr = q.front();
            q.pop();
            for (int i = 0; i < graph[curr].size(); i++) {
                int adjNode = graph[curr][i];
                if (!vis[adjNode]) {
                    if (color[curr] == color[adjNode]) {
                        color[adjNode] = (-1 * color[curr]);
                    }
                    vis[adjNode] = 1;
                    q.push(adjNode);
                }
                if (vis[adjNode] && color[adjNode] == color[curr])
                    return false;
                }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);        
        vector<int> vis(n, 0);
        bool ans = true;
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                bool temp = bfs(i, graph, color, vis);
                ans = ans & temp;
            }
        }
        return ans;
    }
};

// DFS
class Solution {
public:
    bool dfs(int node, int parent, vector<vector<int>>& graph, vector<int>& color) {
        if (parent == -1 || color[parent] == 2) {
            color[node] = 1;
        } else {
            color[node] = 2;
        }
        for (auto ngr : graph[node]) {
            if (color[ngr] == -1) {
                if (dfs(ngr, node, graph, color) == false)
                    return false;
            } else if (color[ngr] == color[node])
                return false;
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for (int i = 0; i < n; i++) {
            if (color[i] == -1 && dfs(i, -1, graph, color) == false)
                return false;
        }
        return true;
    }
};
