Approach 1 - Recursion
// 1. First we make a solve (recursive function) and send the number of dice available, the number of faces and the target.
// 2. The base cases are
// i. If there are no remaining dice(n==0) and target==0(that is, no remaining target) that means we have reached our goal 
// of achieving value target with n number of dice.
// ii. Else if number of dice becomes 0(n==0) but we still have some value for target(target>0) that means we can't reach the 
// target with the current taken faces of dice(we used a loop for each of the k faces which will get clear in the code below), 
// so we return 0.
// iii. else if we still have some dice to roll(n>0) but target has become 0, in that case as well, we return 0 as without rolling 
// all the dice, we reached the taregt which is not acceptable.
// 3. Next step is that, for each face value, we rum a loop(that i from 1 to k) and check availability of answer with the current 
// face value, and keep adding it to the answer keeping in check the mod of the answer.
// 4. Finally we return the answer.

class Solution {
public:
    const int mod=1e9+7;
     int solve(int n,int k,int target)
     {
         if(n==0)
         {
             if(target==0)return 1;
             else return 0;
         }
         else if(n!=0 and target<=0)return 0;
         int ans=0;
         for(int i=1;i<=min(k,target);i++)
         {
             ans=(ans+solve(n-1,k,target-i))%mod;
         }
         return ans;
     }
    
     int numRollsToTarget(int n, int k, int target) {
         int ans=solve(n,k,target);
         return ans;
     }
};

// Approach 2 - Memoization
// If the above approach is clear, it won't take much effort to understand below modifications.
// Here, we are just taking a dp vector of vectors as two things the number of dice(n) and the target value is changing in every iteration.
// If pre-calculated answer is available in the dp table, we return it...else we calculate the value for corresponding n and target values and
// put it in the table as well as return it.

class Solution {
public:
    const int mod=1e9+7;
	vector<vector<int>>dp;
     int solve(int n,int k,int target)
     {
	     if(dp[n][target]!=-1)return dp[n][target];
         if(n==0)
         {
             if(target==0)return dp[n][target]=1;
             else return dp[n][target]=0;
         }
         else if(n!=0 and target<=0)return dp[n][target]=0;
         int ans=0;
         for(int i=1;i<=min(k,target);i++)
         {
             ans=(ans+solve(n-1,k,target-i))%mod;
         }
         return dp[n][target]=ans;
     }
    
     int numRollsToTarget(int n, int k, int target) {
	     dp=vector<vector<int>>(n+1,vector<int>(target+1,-1));
         int ans=solve(n,k,target);
         return ans;
     }
};

// Approach 3 - Tabulation
class Solution {
public:
    vector<vector<int>>dp;
    const int mod=1e9+7;
    int numRollsToTarget(int n, int k, int target) {
        dp=vector<vector<int>>(n+1,vector<int>(target+1,0));
        dp[0][0]=1;
        for(int i=1;i<=target;i++)
        {
            dp[0][i]=0;
        }
        
        for(int i=1;i<=n;i++)dp[i][0]=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=target;j++)
            {
                for(int h=1;h<=k;h++)
                {
                    if(h<=j)
                    dp[i][j]=(dp[i][j]+dp[i-1][j-h])%mod;
                }
            }
        }
        return dp[n][target];
    }
};
