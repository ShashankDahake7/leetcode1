/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    // p = postorder index, s = inorder start, e = inorder end
    TreeNode* solve(vector<int>& inorder, vector<int>& postorder, int& p, int s, int e) {
        if (p < 0 || s > e || s >= inorder.size() || e < 0) {
            return NULL;
        }
        int x = postorder[p];
        p--;
        auto root = new TreeNode(x);
        if (s == e) {
            return root;
        }
        for (int i = s; i <= e; i++) {
            if (inorder[i] == x) {
                root->right = solve(inorder, postorder, p, i + 1, e);
                root->left = solve(inorder, postorder, p, s, i - 1);
            }
        }
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return solve(inorder, postorder, postorder.size() - 1, 0, inorder.size() - 1);
    }
};
