// Method-1
class Solution {
public:
    bool closeStrings(string word1, string word2) {
        unordered_map<char, int> mp1, mp2, mp3, mp4;
        for(auto i : word1){
            mp1[i]++;
            mp3[i] = 1;
        }
        for(auto i : word2){
            mp2[i]++;
            mp4[i] = 1;
        }
        if(mp3 != mp4){
            return false;
        }
        multiset<int> s1, s2; 
        for(auto [c, f] : mp1){
            s1.insert(f);
        }
        for(auto [c, f] : mp2){
            s2.insert(f);
        }
        return s1 == s2;
    }
};

// Method-2
class Solution {
public:
    bool closeStrings(string word1, string word2) {
        vector<int> mp1(26, 0), mp2(26, 0);
        for(auto i : word1){
            mp1[i - 'a']++;
        }
        for(auto i : word2){
            mp2[i - 'a']++;
        }
        for(int i = 0; i < mp1.size(); i++){
            if(((mp1[i] == 0) && (mp2[i] != 0)) || ((mp1[i] != 0) && (mp2[i] == 0))){
                return false;
            }
        }
        sort(mp1.begin(), mp1.end());
        sort(mp2.begin(), mp2.end());
        return mp1 == mp2;
    }
};
