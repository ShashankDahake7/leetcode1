// Method-1
class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
        int n = deck.size();
        vector<int> ans(n, 0);
        bool skip = false;
        int i = 0, j = 0;
        sort(deck.begin(), deck.end());
        while(i < n){
            if(ans[j] == 0){
                if(skip == false){
                    ans[j] = deck[i];
                    i++;
                }
                skip = !skip;
            }
            j = (j + 1) % n;
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
        sort(deck.begin(), deck.end());
        int n = deck.size();
        vector<int> result(n);
        deque<int> dq;
        for (int i = 0; i < n; i++) {
            dq.push_back(i);
        }
        for (int card : deck) {
            int idx = dq.front();
            dq.pop_front();
            result[idx] = card;
            if (!dq.empty()) {
                dq.push_back(dq.front());
                dq.pop_front();
            }
        }
        return result;
    }
};
