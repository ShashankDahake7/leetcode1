class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n = startTime.size();
        vector<vector<int>> j;
        for(int i = 0; i < n; i++){
            j.push_back({endTime[i], startTime[i], profit[i]});
        }
        sort(j.begin(), j.end());
        vector<pair<int, int>> dp = {{0,0}};
        for(auto job : j){
            int start = job[1];
            int end = job[0];
            int p = job[2];
            int prevIndex = upper_bound(dp.begin(), dp.end(), make_pair(start, INT_MAX)) - dp.begin() - 1;
            int maxProfit = max(dp[prevIndex].second + p, dp.back().second);
            dp.emplace_back(end, maxProfit);
        }
        return dp.back().second;
    }
};
