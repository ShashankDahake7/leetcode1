// Method-1
class Solution {
public:
    int maxRotateFunction(vector<int>& nums) {
        int k = 0;
        int ans = INT_MIN;
        while(k < nums.size()){
            int i = k;
            int sum = 0;
            int count = 0;
            while(count < nums.size()){
                sum += count * nums[i];
                i = (i+1) % nums.size();
                count++;
            }
            ans = max(ans, sum);
            k++;
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    int maxRotateFunction(vector<int>& nums) {
        int n = nums.size();
        int F = 0, sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            F += i * nums[i];
        }
        int gSum = F;
        for(int i = n - 1; i >= 0; i--){
            F += sum - n * nums[i];
            gSum = max(gSum, F);
        }
        return gsum;
    }
};
