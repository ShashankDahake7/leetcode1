// Method-1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* dummy = new ListNode(0, head);
        ListNode* prev = dummy;
        while (head != NULL) {
            if (head->next != NULL && head->val == head->next->val) {
                while (head->next != NULL && head->val == head->next->val) {
                    head = head->next;
                }
                prev->next = head->next;
            }
            else {
                prev = prev->next;
            }
            head = head->next;
        }
        return dummy->next;
    }
};

// Method-2
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (!head) {
            return head;
        }
        ListNode *prev = NULL, *curr = head, *forward = curr->next;
        while (forward) {
            if (curr->val == forward->val) {
                while (forward && forward->val == curr->val) {
                    forward = forward->next;
                }
                if (!prev) {
                    head = forward;
                }
                else {
                    prev->next = forward;
                }
            } 
            else {
                prev = curr;
            }
            curr = forward;
            if (forward) {
                forward = curr->next;
            }
        }
        return head;
    }
};
