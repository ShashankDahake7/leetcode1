class Solution {
public:
    int func(vector<vector<int>>& grid, int x, int y1, int y2, vector<vector<vector<int>>>& dp) {
        int n = grid.size();
        int m = grid[0].size();
        if(x >= n) return 0;
        if(y1 < 0 || y1 >= m || y2 >= m || y2 < 0)  return 0;
        if(y1 >= y2) return 0;
        if(dp[x][y1][y2] != -1) return dp[x][y1][y2];
        int cur_ans = grid[x][y1] + grid[x][y2];
        cout << cur_ans << endl;
        int mx = 0;
        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                mx = max(mx, func(grid, x + 1, y1 + i, y2 + j, dp));
            }
        }
        return dp[x][y1][y2] = cur_ans + mx;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n == 0)  return 0;
        int m = grid[0].size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(m + 1, vector<int>(m + 1, -1)));
        return func(grid, 0, 0, m - 1, dp);
    }
};
