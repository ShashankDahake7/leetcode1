// Recursion
class Solution {
public:
    int solve(int i, int j, int m, int n, vector<vector<int>>& grid) {
        if (i == m - 1 && j == n - 1) {
            return grid[i][j];
        }
        // Right 
        if (i == m - 1) {
            return grid[i][j] + solve(i, j + 1, m, n, grid);
        } 
        // down 
        else if (j == n - 1) {
            return grid[i][j] + solve(i + 1, j, m, n, grid);
        }
        return grid[i][j] + min(solve(i, j + 1, m, n, grid), solve(i + 1, j, m, n, grid));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        return solve(0, 0, m, n, grid);
    }
};

// Top-Down
class Solution {
public:
    int solve(int i, int j, int m, int n, vector<vector<int>>& grid, vector<vector<int>>& dp) {
        if (i == m - 1 && j == n - 1) {
            return dp[i][j] = grid[i][j];
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        // Right
        if (i == m - 1) {
            return dp[i][j] = grid[i][j] + solve(i, j + 1, m, n, grid, dp);
        }
        // down
        else if (j == n - 1) {
            return dp[i][j] = grid[i][j] + solve(i + 1, j, m, n, grid, dp);
        }
        return dp[i][j] = grid[i][j] + min(solve(i, j + 1, m, n, grid, dp), solve(i + 1, j, m, n, grid, dp));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(0, 0, m, n, grid, dp);
    }
};

// Bottom-Up
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));        
        // Initialize the first cell of dp table
        dp[0][0] = grid[0][0];
        // Initialize the first column of dp table
        for (int i = 1; i < m; ++i) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        // Initialize the first row of dp table
        for (int j = 1; j < n; ++j) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        // Fill the rest of the dp table
        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        // Return the value in the bottom-right corner of dp table
        return dp[m - 1][n - 1];
    }
};
