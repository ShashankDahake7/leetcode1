class Solution {
public:
    void dfs(vector<vector<char>>& board, int i, int j, bool& flip, vector<vector<bool>>& visited) {
        if (i >= 0 && i < board.size() && j >= 0 && j < board[0].size() && !visited[i][j]) {
            visited[i][j] = true;
            if (i == 0 || i == board.size() - 1 || j == 0 || j == board[0].size() - 1) {
                if (board[i][j] != 'X') {
                    flip = false;
                }
            }
            if (board[i][j] != 'O') {
                return;
            }
            dfs(board, i - 1, j, flip, visited);
            dfs(board, i + 1, j, flip, visited);
            dfs(board, i, j - 1, flip, visited);
            dfs(board, i, j + 1, flip, visited);
        }
    }
    void fill(vector<vector<char>>& board, int i, int j) {
        if (i >= 0 && i < board.size() && j >= 0 && j < board[i].size() && board[i][j] != 'X') {
            board[i][j] = 'X';
            fill(board, i - 1, j);
            fill(board, i + 1, j);
            fill(board, i, j - 1);
            fill(board, i, j + 1);
        }
    }
    void solve(vector<vector<char>>& board) {
        for (int i = 1; i < board.size() - 1; i++) {
            for (int j = 1; j < board[i].size() - 1; j++) {
                if (board[i][j] == 'O') {
                    bool flip = true;
                    vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
                    dfs(board, i, j, flip, visited);
                    if (flip) {
                        fill(board, i, j);
                    }
                }
            }
        }
    }
};
