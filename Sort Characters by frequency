// Method-1
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> mp;
        for (auto it : s)
            mp[it]++;
        vector<pair<int, char>> temp;
        for (auto i : mp)
            temp.push_back({i.second, i.first});
        sort(temp.begin(), temp.end());
        int k = s.size() - 1;
        for (int i = 0; i < temp.size(); i++) {
            for (int j = 0; j < temp[i].first; j++) {
                s[k] = temp[i].second;
                k--;
            }
        }
        return s;
    }
};

// Method-2
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> freq;
        priority_queue<pair<int, char>> maxheap;
        for (char c : s) {
            freq[c]++;
        }
        for (auto it : freq) {
            maxheap.push({it.second, it.first});
        }
        s = "";
        while (!maxheap.empty()) {
            s += string(maxheap.top().first, maxheap.top().second);
            maxheap.pop();
        }
        return s;
    }
};
