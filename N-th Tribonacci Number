// Method-1
class Solution {
public:
    int tribonacci(int n) {
        vector<int> tribonacci = {0, 1, 1};
        if (n < tribonacci.size()) {
            return tribonacci[n];
        }
        n -= 2;
        while (n--) {
            int N = tribonacci.size();
            tribonacci.push_back(tribonacci[N - 1] + tribonacci[N - 2] + tribonacci[N - 3]);
        }
        return tribonacci.back();
    }
};

// Method-2
class Solution {
public:
    int tribonacci(int n) {
        int t0 = 0, t1 = 1, t2 = 1, t3 = 2;
        for (int i = 3; i <= n; i++) {
            t3 = t0 + t1 + t2;
            t0 = t1;
            t1 = t2;
            t2 = t3;
        }
        if (n >= 3)
            return t3;
        if (n == 0)
            return 0;
        return 1;
    }
};
