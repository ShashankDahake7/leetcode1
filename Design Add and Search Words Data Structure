class TrieNode {
public:
    TrieNode* children[26];  // Array to store links to child nodes
    bool isWord;             // Flag indicating whether the node represents the end of a word
    
    TrieNode() {
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;  // Initialize all children as NULL
        }
        isWord = false;  // Initialize isWord flag as false
    }
};

class WordDictionary {
public:
    TrieNode* root;  // Pointer to the root node of the Trie
    WordDictionary() {
        // Initialize the Trie with an empty root node
        root = new TrieNode();  
    }
    bool searchInNode(string& word, int i, TrieNode* node) {
        if (node == NULL) {
            return false;  // Return false if the node is NULL
        }
        if (i == word.size()) {
            return node->isWord;  // Return true if the end of the word is reached
        }
        if (word[i] != '.') {
            // Recursively search child node
            return searchInNode(word, i + 1, node->children[word[i] - 'a']);  
        }
        for (int j = 0; j < 26; j++) {
            // Search all child nodes for wildcard query
            if (searchInNode(word, i + 1, node->children[j])) {  
                return true;
            }
        }
        return false;
    }
    
    void addWord(string word) {
        TrieNode* node = root;
        int curr = 0;
        
        for (int i = 0; i < word.size(); i++) {
            // Calculate the index of the character in the children array
            curr = word[i] - 'a';  
            // Create a new node if the child does not exist
            if (node->children[curr] == NULL) { 
                node->children[curr] = new TrieNode();  
            }
            node = node->children[curr];
        }
        
        // Mark the last node as the end of the inserted word
        node->isWord = true;  
    }
    
    bool search(string word) {
        TrieNode* node = root;
        // Start search from the root
        return searchInNode(word, 0, node);  
    }
};
