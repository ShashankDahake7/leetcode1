// Recursion
class Solution {
public:
    int solve(int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return 0;
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        int right = solve(i, j + 1, m, n);
        int down = solve(i + 1, j, m, n);
        return right + down;
    }
    int uniquePaths(int m, int n) { 
        return solve(0, 0, m, n); 
    }
};

// Bottom-Up
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        // Initialize the rightmost column and bottom row to 1 because there is only one way to reach each cell in those rows/columns.
        for (int i = 0; i < m; i++) {
            dp[i][n-1] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[m-1][j] = 1;
        }
        // Fill in the dp table bottom-up
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                dp[i][j] = dp[i+1][j] + dp[i][j+1];
            }
        }
        return dp[0][0];
    }
};

// Top-down
class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &dp){
        if(i == 0 && j == 0) {
            return 1;
        }
        if(i < 0 || j < 0) {
            return 0;
        }
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        int up = solve(i - 1, j, dp);
        int down = solve(i, j - 1, dp);
        return dp[i][j] = up + down;
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n,-1));
        return solve(m - 1, n - 1, dp);
    }
};

// Math
// The total step number should be m+n-2. This means that we have to move down for m-1 steps and move right n-1 steps to reach the definition. Then different choice number would be:
// UniqueStepNum = choose (m-1) from (m+n-2) = choose (n-1) from (m+n-2)
class Solution {
public:
    int uniquePaths(int m, int n) {
        if (m <= 0 || n <= 0)
            return 0;
        long long res = 1;
        for (int i = n; i < m + n - 1; i++) {
            res = res * i / (i - n + 1);
        }
        return (int)res;
    }
};
