class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph(n);
        // vector<int> indegree keeps count of the number of nodes approaching a node
        vector<int> indegree(n, 0), ans;
        // Creating an adjacency matrix for the given graph
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
            indegree[e[0]]++;
            indegree[e[1]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            // add all the leaf nodes to the queue
            if (indegree[i] == 1) {
                q.push(i);
                indegree[i]--;
            }
        }
        while (!q.empty()) {
            int s = q.size();
            ans.clear();
            for (int i = 0; i < s; i++) {
                int curr = q.front();
                q.pop();
                ans.push_back(curr);
                // For each node, attached to the leaf nodes, we decrement the indegree i.e
                // remove the leaf nodes connected to them. We keep on doing this until we reach the
                // middle nodes.
                for (auto child : graph[curr]) { 
                    indegree[child]--;
                    if (indegree[child] == 1) {
                        q.push(child);
                    }
                }
            }
        }
        // If there is only 1 node in the graph, the min height is 0, with root being '0'
        if (n == 1) {
            ans.push_back(0);
        }
        return ans;
    }
};
