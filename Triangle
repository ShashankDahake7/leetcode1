// Method-1
class Solution {
public:
    int solve(vector<vector<int>>& triangle, int s, int i) {
        if(s == triangle.size() - 1) {
            return triangle[s][i];
        }
        int a = triangle[s][i] + solve(triangle, s + 1, i);
        int b = INT_MAX;
        if(i < s + 1) {
            b = triangle[s][i] + solve(triangle, s + 1, i + 1);
        }
        return min(a, b);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        return solve(triangle, 0 , 0);
    }
};

// Method-2
class Solution {
public:
    int solve(vector<vector<int>>& triangle, vector<vector<int>>& memo, int s, int i) {
        if (s == triangle.size() - 1) {
            return triangle[s][i];
        }
        if (memo[s][i] != -1) {
            return memo[s][i];
        }
        int a = triangle[s][i] + solve(triangle, memo, s + 1, i);
        int b = INT_MAX;
        if (i < s + 1) {
            b = triangle[s][i] + solve(triangle, memo, s + 1, i + 1);
        }
        memo[s][i] = min(a, b);
        return memo[s][i];
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> memo(n, vector<int>(n, -1));
        return solve(triangle, memo, 0, 0);
    }
};

// Method-3
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i + 1; j++) {
                dp[i][j] = triangle[i][j];
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                dp[i][j] = dp[i][j] + min(dp[i + 1][j], dp[i + 1][j + 1]);
            }
        }
        return dp[0][0];
    }
};
