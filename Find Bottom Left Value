// DFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int& ans, int& maxDepth, int depth) {
        if (root == NULL) {
            return;
        }
        if (depth > maxDepth) {
            ans = root->val;
            maxDepth = depth;
        }
        solve(root->left, ans, maxDepth, depth + 1);
        solve(root->right, ans, maxDepth, depth + 1);
    }
    int findBottomLeftValue(TreeNode* root) {
        int ans = 0;
        int depth = 0;
        int maxDepth = 0;
        if (root->left == NULL && root->right == NULL) {
            return root->val;
        }
        solve(root, ans, maxDepth, depth);
        return ans;
    }
};

// BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int last = 0;
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            int count = q.size();
            for (int i = 0; i < count; i++) {
                TreeNode* curr = q.front();
                q.pop();
                if (i == 0)
                    last = curr->val;
                if (curr->left)
                    q.push(curr->left);
                if (curr->right)
                    q.push(curr->right);
            }
        }
        return last;
    }
};
