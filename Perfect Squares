// Question states that add perfects squares to "0" to make it equal to the given target
// OR
// Take the given target, subtract perfect squares to make it "0".

// #We need to subtract perfect squares optimally to make the target 0
// #We need to keep perfect squares as minimum as possible
// #But we have many options of perfect squares to subtract
// ->For target = 18
// ->we can first subtract =>[1^2 = 1] or [ 2^2 = 4] or [3^2 = 9] or [4^2 = 16]
// #If you are thinking that choosing the largest one (16) at the first step would work,
// then you just need to observe more carefully that
// 18 - (4^2) = 2
// 2 - (1^2) = 1 //Future
// 1 - (1^2) = 0 //Future [3 STEPS]

// #But actually picking (9) at first step would prove to be optimal here
// 18 - (3^3) = 9
// 9 - (3^3) = 0 //Future [2 STEPS]

// #We are "NOT SURE" if subtracting 1 or 4 or 9 or 16 first would be optimal as we don't know the future results
// #So whenever you are not sure which step would be optimal, no need to stress on guessing the optimal one, just =>
// "TRY ALL OPTIONS, THEN CHOOSE THE OPTIMAL ONE"
// #So for any given target, just try all the perfect squares you can subtract

// target(18) => [18 - (1^2) = 17] =>target(17)
// target(18) => [18 - (2^2) = 14] => target(14)
// target(18) => [18 - (3^2) = 9] => target(9)
// target(18) => [18 - (4^2) = 2] => target(2)
// #Now we have a smaller subproblem, which could be solved using recursion
// #so
// for target(18) = 1 + min (target(17), target(14), target(9), target(2))
// #Let recursion do it's work and you just use those hardworked results in you favour :)
//========================================================================================================

// RECURSION 
class Solution {
public:
    int solve(int n)
    {
        if (n == 0) return 0;
        
        int mnCount = INT_MAX;
        for (int num = 1; num <= sqrt(n); num++)
        {
            int sqNum = num * num;
            int currCount = 1 + solve(n - sqNum);
            mnCount = min(mnCount, currCount);
        }
        return mnCount;
    }
    int numSquares(int n) 
    {
        return solve(n);
    }
};

// MEMOIZATION 
class Solution {
public:
    int solve(int n, vector<int>&dp)
    {
        if (n == 0) return 0;
        if (dp[n] != -1) return dp[n];
        
        int mnCount = INT_MAX;
        for (int num = 1; num <= sqrt(n); num++)
        {
            int sqNum = num * num;
            int currCount = 1 + solve(n - sqNum, dp);
            mnCount = min(mnCount, currCount);
        }
        return dp[n] = mnCount;
    }
    int numSquares(int n) 
    {
        vector<int>dp(n + 1, -1);
        return solve(n, dp);
    }
};

// DP 
class Solution {
public:
    int solve(int n)
    {
        vector<int>dp(n + 1, INT_MAX);
        dp[0] = 0; 
        for (int target = 1; target <= n; target++)
        {
            int mnCount = INT_MAX;
            for (int num = 1; num <= sqrt(target); num++)
            {
                int sqNum = num * num;
                int currCount = 1 + dp[target - sqNum];
                mnCount = min(mnCount, currCount);
            }
            dp[target] = mnCount;
        }
        return dp[n];
    } 
    int numSquares(int n) 
    {
        return solve(n);
    }
};
