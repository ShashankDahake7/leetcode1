// Recursion
class Solution {
public:
    bool solve(int i, int j, int k, int l, int m, int n, string s1, string s2, string s3) {
        if(i == l  && j == m  && k == n) {
            return true;
        }
        if(k > n) {
            return false;
        }
        bool first = false, second = false;
        if(i < l && s1[i] == s3[k]) {
            first = solve(i + 1, j, k + 1, l, m, n, s1, s2, s3);
        }
        if(j < n && s2[j] == s3[k]) {
            second = solve(i, j + 1, k + 1, l, m, n, s1, s2, s3);
        }
        return first || second;
    }
    bool isInterleave(string s1, string s2, string s3) {
        int l = s1.length(), m = s2.length(), n = s3.length();
        if(l + m != n) {
            return false;
        }
        return solve(0, 0, 0, l, m, n, s1, s2, s3);
    }
};

// Top-Down
class Solution {
public:
    bool solve(int i, int j, int k, int l, int m, int n, string s1, string s2, string s3, vector<vector<vector<int>>>& memo) {
        if (i == l && j == m && k == n) {
            return true;
        }
        if (k > n) {
            return false;
        }
        if (memo[i][j][k] != -1) {
            return memo[i][j][k];
        }
        bool first = false, second = false;
        if (i < l && s1[i] == s3[k]) {
            first = solve(i + 1, j, k + 1, l, m, n, s1, s2, s3, memo);
        }
        if (j < m && s2[j] == s3[k]) {
            second = solve(i, j + 1, k + 1, l, m, n, s1, s2, s3, memo);
        }
        return memo[i][j][k] = first || second;
    }
    bool isInterleave(string s1, string s2, string s3) {
        int l = s1.length(), m = s2.length(), n = s3.length();
        if (l + m != n) {
            return false;
        }
        vector<vector<vector<int>>> memo(l + 1, vector<vector<int>>(m + 1, vector<int>(n + 1, -1)));
        return solve(0, 0, 0, l, m, n, s1, s2, s3, memo);
    }
};

// Bottom-Up
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int l = s1.length(), m = s2.length(), n = s3.length();
        if (n != l + m)
            return false;
        bool table[l + 1][m + 1];
        for (int i = 0; i < l + 1; i++) {
            for (int j = 0; j < m + 1; j++) {
                if (i == 0 && j == 0)
                    table[i][j] = true;
                else if (i == 0)
                    table[i][j] = (table[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
                else if (j == 0)
                    table[i][j] = (table[i - 1][j] && s1[i - 1] == s3[i + j - 1]);
                else
                    table[i][j] = (table[i - 1][j] && s1[i - 1] == s3[i + j - 1]) || (table[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
            }
        }
        return table[l][m];
    }
};
