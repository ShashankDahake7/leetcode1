// BFS
class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int V = graph.size();
        vector<int> res;
        vector<int> indeg(V, 0);
        vector<vector<int>> adj(V, vector<int>());
        for (int i = 0; i < V; i++) {
            for (auto e : graph[i]) {
                adj[e].push_back(i);
                indeg[i]++;
            }
        }
        queue<int> q;
        for (int i = 0; i < V; i++) {
            if (indeg[i] == 0)
                q.push(i);
        }
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            res.push_back(node);
            for (auto i : adj[node]) {
                indeg[i]--;
                if (indeg[i] == 0)
                    q.push(i);
            }
        }
        sort(res.begin(), res.end());
        return res;
    }
};

// DFS
class Solution {
public:
    bool detectCycle(int v, vector<vector<int>>& graph, vector<int>& vis, vector<int>& pathVis) {
        vis[v] = 1;
        pathVis[v] = 1;
        for (auto& nb : graph[v]) {
            if (vis[nb] == 0) {
                if (detectCycle(nb, graph, vis, pathVis))
                    return true;
            } else {
                if (pathVis[nb] == 1) {
                    return true;
                }
            }
        }
        pathVis[v] = 0;
        return false;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int v = graph.size();
        vector<int> ans;
        vector<int> vis(v, 0);
        vector<int> pathVis(v, 0);
        for (int i = 0; i < v; i++) {
            if (!detectCycle(i, graph, vis, pathVis)) {
                ans.push_back(i);
            }
        }
        return ans;
    }
};
