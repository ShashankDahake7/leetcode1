// Recursion
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> solve(int start, int end) {
        if (start > end) {
            return {NULL};
        }
        if (start == end) {
            TreeNode* root = new TreeNode(start);
            return {root};
        }
        vector<TreeNode*> res;
        for (int i = start; i <= end; i++) {
            vector<TreeNode*> leftBSTs = solve(start, i - 1);
            vector<TreeNode*> rightBSTs = solve(i + 1, end);
            for (TreeNode* leftRoot : leftBSTs) {
                for (TreeNode* rightRoot : rightBSTs) {
                    TreeNode* root = new TreeNode(i);
                    root->left = leftRoot;
                    root->right = rightRoot;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
    vector<TreeNode*> generateTrees(int n) { 
        return solve(1, n); 
    }
};

// Top-Down
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    map<pair<int, int>, vector<TreeNode*>> dp;
    vector<TreeNode*> solve(int start, int end) {
        if (start > end) {
            return {NULL};
        }
        if (start == end) {
            TreeNode* root = new TreeNode(start);
            return dp[{start, end}] = {root};
        }
        if (dp.find({start, end}) != dp.end()) {
            return dp[{start, end}];
        }
        vector<TreeNode*> res;
        for (int i = start; i <= end; i++) {
            vector<TreeNode*> leftBSTs = solve(start, i - 1);
            vector<TreeNode*> rightBSTs = solve(i + 1, end);
            for (TreeNode* leftRoot : leftBSTs) {
                for (TreeNode* rightRoot : rightBSTs) {
                    TreeNode* root = new TreeNode(i);
                    root->left = leftRoot;
                    root->right = rightRoot;
                    res.push_back(root);
                }
            }
        }
        return dp[{start, end}] = res;
    }
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) {
            return {};
        }
        return solve(1, n);
    }
};
