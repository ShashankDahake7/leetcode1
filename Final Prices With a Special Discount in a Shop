// Method-1
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        int n = prices.size();
        vector<int> ans;
        for(int i = 0; i < n; i++){
            bool discounted = false;
            for(int j = i + 1; j < n; j++){
                if(prices[i] >= prices[j]){
                    int discount = prices[i] - prices[j];
                    ans.push_back(discount);
                    discounted = true;
                    break;
                }
            }
            if (!discounted) {
                ans.push_back(prices[i]);
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        for(int i = 0 ; i < prices.size() ; i++){
            for(int j = i+1 ; j < prices.size() ; j++){
                if(prices[j] <= prices[i]){
                    prices[i] = (prices[i]-prices[j]);
                    break;
                }
            }
        }
        return prices;
    }
};

// Method-3
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        stack<int> stack;
        vector<int> ans(prices.size());
        for(int i = prices.size() - 1; i >= 0; i--) {
            while(!stack.empty() && stack.top() > prices[i]) {
                stack.pop();
            }
            if(stack.empty()){
                ans[i] = prices[i];
                stack.push(prices[i]);
            } 
            else {
                ans[i] = (prices[i] - stack.top());
                stack.push(prices[i]);
            }
        }
        return ans;
    }
};
