class Solution {
public:
    bool isValid(int i, int j, int m, int n, vector<vector<int>>& grid){
        if(i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 1){
            return true;
        }
        return false;
    }
    void dfs(int i, int j, int m, int n, vector<vector<int>>& grid){
        grid[i][j] = 0;
        vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for(auto &d : dir){
            int new_i = i + d[0];
            int new_j = j + d[1];
            if(isValid(new_i, new_j, m, n, grid)){
                dfs(new_i, new_j, m, n, grid);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if((i == 0 || i == m - 1 || j == 0 || j == n - 1) && grid[i][j] == 1){
                    dfs(i, j, m, n, grid);
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    ans++;
                }
            }
        }
        return ans;
    }
};
