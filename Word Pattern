// Method-1
class Solution{
public:
    bool wordPattern(string p, string s) {
        vector<string> words;
        stringstream ss(s);
        string token;
        int countWords = 0;
        while(getline(ss, token, ' ')){
            words.push_back(token);
            countWords++;
        }
        int n = p.length();
        if(n != countWords){
            return false;
        }
        unordered_map<string, char> mp;
        set<char> used;
        for(int i = 0; i < n; i++){
            string word = words[i];
            char ch = p[i];
            if((mp.find(word) == mp.end()) && (used.find(ch) == used.end())){
                used.insert(ch);
                mp[word] = ch;
            }
            else if(mp[word] != p[i]){
                return false;
            }
        }
        return true;
    }
};

// Method-2
class Solution{
public:
    bool wordPattern(string p, string s) {
        unordered_map<char, int> charToIndex; 
        unordered_map<string, int> wordToIndex;
        stringstream ss(s);
        string token;
        int countTokens = 0;
        int i = 0;
        int n = p.length();
        while(ss >> token){
            countTokens++;
            if((i == n) || (charToIndex[p[i]] != wordToIndex[token])){
                return false;
            }
            charToIndex[p[i]] = i + 1;
            wordToIndex[token] = i + 1;
            i++;
        }
        if((countTokens != n) || (i != n)){
            return false;
        }
        return true;
    }
};
