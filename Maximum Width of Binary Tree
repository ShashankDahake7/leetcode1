// Method-1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
#define ull unsigned long long
#define um unordered_map
class Solution {
public:
    ull dfs(TreeNode* root, int l, ull i, um<int, ull>& m) {
        // base case
        if (root == NULL)
            return 0;
        // storing the first node in the map at level l
        if (m.find(l) == m.end())
            m[l] = i;
        ull left = dfs(root->left, l + 1, 2 * i, m); // recurse on left subtree
        ull right = dfs(root->right, l + 1, 2 * i + 1, m); // recurse on right subtree
        return max(i - m[l] + 1, max(left, right)); // return max of the difference between first and last index and max of left,right
    }
    int widthOfBinaryTree(TreeNode* root) {
        um<int, ull> f; // storing the last possible index at each level
        return dfs(root, 0, 0, f); // dfs will return you the max width
    }
};

// Method-2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (root == NULL)
            return 0;
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});
        long long ans = 0;
        while (q.empty() == false) {
            long long k = q.size();
            long long mmin = q.front().second;
            long long first, last;
            for (long long i = 0; i < k; i++) {
                long long curr_id = q.front().second - mmin;
                TreeNode* curr = q.front().first;
                q.pop();
                if (i == 0)
                    first = curr_id;
                if (i == k - 1)
                    last = curr_id;
                if (curr->left != NULL)
                    q.push({curr->left, curr_id * 2 + 1});
                if (curr->right != NULL)
                    q.push({curr->right, curr_id * 2 + 2});
            }
            ans = max(ans, last - first + 1);
        }
        return ans;
    }
};
