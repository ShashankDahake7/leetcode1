// Brute Force
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maximumProfit=0;
        int minimum=prices[0];
        for(int i=0;i<prices.size();i++){
            minimum=min(minimum,prices[i]);
            int profit=prices[i]-minimum;
            maximumProfit=max(maximumProfit,profit);
        }
        return maximumProfit;
    }
};

// Tabulation
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int> maxPrices(n, 0);
        maxPrices[n-1] = prices[n-1];
        for(int i=n-2; i>=0; i--){
            maxPrices[i] = max(maxPrices[i+1], prices[i]); 
        }
        int maxProfit = 0;
        for(int i=0; i<n; i++){
            maxProfit = max(maxProfit, maxPrices[i] - prices[i]); 
        }
        return maxProfit;
    }
};

// Space Optimized
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int buyAtPrice = INT_MAX;
        int maxProfit = 0;
        for(int i=0; i<n; i++){
            buyAtPrice = min(buyAtPrice, prices[i]);
            maxProfit = max(maxProfit, prices[i] - buyAtPrice); 
        }
        return maxProfit;
    }
};
