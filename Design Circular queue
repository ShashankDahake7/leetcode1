class MyCircularQueue {
public:
    int head, tail, size;
    vector<int> q;
    
    MyCircularQueue(int k) : head(-1), tail(-1), size(k), q(k) {}
    
    bool enQueue(int value) {
        if (isFull()) return false;
        if (tail == -1) head = tail = 0;
        else tail = (tail+1) % size;
        q[tail] = value;
        return true;
    }
    
    bool deQueue() {
        if (isEmpty()) return false;
        if (head == tail) head = tail = -1;
        else head = (head+1) % size;
        return true;
    }
    
    int Front() {
        return (isEmpty()) ? -1 : q[head];
    }
    
    int Rear() {
        return (isEmpty()) ? -1 : q[tail];
    }
    
    bool isEmpty() {
        return (head == -1);
    }
    
    bool isFull() {
        return ((head == 0 && tail == size-1) || (tail == head-1)); 
    }
};
