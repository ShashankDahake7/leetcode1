class Solution {
public:
    bool valid(string& s) {
        int hyphen = 0, N = s.size();
        // 'hyphen' is a counter to keep track of the number of hyphens in the
        // word. 'N' holds the size of the string 's'
        for (int i = 0; i < N; ++i) {
            if (isdigit(s[i])) {
                return false;
            }
            if (isalpha(s[i])) {
                continue;
            }
            // If the current character is a letter, we skip it and move to the
            // next character.
            if (s[i] == '-') {
                if (++hyphen > 1) {
                    return false;
                }
                // Increment the 'hyphen' counter and check if it becomes
                // greater than 1. If it does, that means there is more than one
                // hyphen in the word, making it invalid, so we return false.
                if (i - 1 < 0 || !isalpha(s[i - 1]) || i + 1 >= N ||
                    !isalpha(s[i + 1])) {
                    return false;
                }
                // Check if the hyphen is surrounded by letters (alphabets) on
                // both sides. If it is not, the word is invalid, so we return
                // false.
            } else if (i != N - 1) {
                return false;
            }
            // If the character is not a hyphen, it should be a punctuation
            // mark. If the punctuation mark is not the last character of the
            // word, the word is invalid, so we return false.
        }
        return true;
    }
    int countValidWords(string s) {
        string w;
        istringstream ss(s);
        int ans = 0;
        while (ss >> w) {
            ans += valid(w);
        }
        return ans;
    }
};
