// Method-1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    unordered_map<TreeNode*, TreeNode*> map;
    void parent(TreeNode* r, TreeNode* p) {
        if (!r)
            return;
        map[r] = p;
        p = r;
        parent(r->left, p);
        parent(r->right, p);
    }
    void below(TreeNode* t, int k) {
        if (!t)
            return;
        if (!k) {
            ans.push_back(t->val);
            return;
        }
        if (t->left)
            below(t->left, k - 1);
        if (t->right)
            below(t->right, k - 1);
    }
    // here we will travel one step up in the tree and find remaining k-1 distant values.
    void above(TreeNode* t, int k) {
        if (!t)
            return;
        if (k == 0) {
            ans.push_back(t->val);
            return;
        }
        // if the value is in left part of parent the we have to find below of
        // right child......and vice versa.
        if (map[t])
            map[t]->left == t ? below(map[t]->right, k - 2) : below(map[t]->left, k - 2);
        // recursion call
        above(map[t], k - 1);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        if (!root)
            return ans;
        parent(root, NULL);
        if (K == 0)
            return {target->val};
        below(target, K);
        if (target != root)
            above(target, K);
        return ans;
    }
};

// Method-2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void findParent(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& parent_pointer, TreeNode* target) {
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (node->left) {
                parent_pointer[node->left] = node;
                q.push(node->left);
            }
            if (node->right) {
                parent_pointer[node->right] = node;
                q.push(node->right);
            }
        }
    }

    void findNodes(unordered_map<TreeNode*, TreeNode*>& parent_pointer, TreeNode* target, vector<int>& ans, int k) {
        queue<TreeNode*> q;
        q.push(target);
        int dist = 0;
        unordered_map<TreeNode*, bool> visited;
        visited[target] = true;
        while (!q.empty()) {
            int size = q.size();
            if (dist++ == k)
                break;
            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front();
                q.pop();
                if (node->left and !visited[node->left]) {
                    q.push(node->left);
                    visited[node->left] = true;
                }
                if (node->right and !visited[node->right]) {
                    q.push(node->right);
                    visited[node->right] = true;
                }
                if (parent_pointer[node] and !visited[parent_pointer[node]]) {
                    q.push(parent_pointer[node]);
                    visited[parent_pointer[node]] = true;
                }
            }
        }
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            ans.push_back(node->val);
        }
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent_pointer;
        vector<int> ans;
        findParent(root, parent_pointer, target);
        findNodes(parent_pointer, target, ans, k);
        return ans;
    }
};
