class Solution {
public:
    ListNode *reverse(ListNode* &head){
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* forward=NULL;
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    void insertAtTail(ListNode* &head,ListNode* &tail,int value){
        ListNode* temp=new ListNode(value);
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }
        else{
            tail->next=temp;
            tail=temp;
        }
    }
    ListNode* add(ListNode* l1,ListNode* l2){
        ListNode* ansHead=NULL;
        ListNode *ansTail=NULL;
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry!=0){
            int val1=0;
            if(l1!=NULL){
                val1=l1->val;
                l1=l1->next;
            }
            int val2=0;
            if(l2!=NULL){
                val2=l2->val;
                l2=l2->next;
            }
            int sum=carry+val1+val2;
            int digit=sum%10;
            insertAtTail(ansHead,ansTail,digit);
            carry=sum/10;
        }
        return ansHead;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans=add(l1,l2);
        return ans;
    }
};
