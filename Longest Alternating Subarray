// Method-1
class Solution {
public:
    int alternatingSubarray(vector<int>& nums) {
        int n = nums.size(), mx = -1, k = 0;
        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                if((nums[j] - nums[j - 1]) == pow(-1, k)){
                    k++;
                    mx = max(mx, j - i + 1);
                    continue;
                }
                else{ 
                    k = 0;
                    break;
                }
            }
        }
        return mx;
    }
};

// Method-2
class Solution {
public:
    int alternatingSubarray(vector<int> &arr) {
        int maxi = 1, cnt = 1, prev, n = arr.size();
        for (int i = 1; i < n; i++){
            if(cnt % 2 == 1){
                prev = -1;
            }
            else{
                prev = 1;
            }
            if(prev == arr[i - 1] - arr[i]){
                cnt++;
            }
            else if(arr[i - 1] - arr[i] == -1){
                cnt = 2;
            }
            else{
                cnt = 1;
            }
            maxi = max(maxi, cnt);
        }       
        if(maxi == 1){
            return -1;
        }
        return maxi;     
    }
};
