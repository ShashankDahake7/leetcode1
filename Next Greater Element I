// Method-1
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        for(int i=0;i<nums1.size();i++){
            int max=-1;
            for(int j=0;j<nums2.size();j++){
                int index=j;
                if(nums1[i]==nums2[j]){ // Found element in nums2 that matches current element in nums1
                     while(index!=nums2.size()){ // Iterate through remaining elements in nums2 to find next greater element
                        if(nums2[index]>nums1[i]){
                            max=nums2[index]; // Update max if we find a greater element
                            break;
                        }
                        index++;
                    }
               }
            }
            ans.push_back(max);
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int>st;
        st.push(-1);
        vector<int>ans(nums2.size());
        for(int i=nums2.size()-1;i>=0;i--){
            if(st.top()==-1 || st.top()>nums2[i]){
                ans[i]=st.top();
                st.push(nums2[i]);
            }
            else{
                while(st.top()<=nums2[i] && st.top()!=-1){
                    st.pop();
                }
                ans[i]=st.top();
                st.push(nums2[i]);
            }
        }
        int j;
        vector<int>k(nums1.size());
        for(int i=0;i<nums1.size();i++){
            int ele=nums1[i];
            for( j=0;j<nums2.size();j++){
                if(ele==nums2[j]){
                    break;
                }
            }
            k[i]=ans[j];
        }
        return k;
    }
};

// Method-3
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int> map; // map for next greater element
        stack<int> st;
        for (int num : nums2) {
            while (!st.empty() && st.top() < num){ // Pop elements from stack and update map with next greater element
                map[st.top()] = num;
                st.pop();
            }
            st.push(num); // Push current element onto stack
        }   
        for (int i = 0; i < nums1.size(); i++){ // Check if each element in nums1 has a next greater element in map
            nums1[i] = map.count(nums1[i]) ? map[nums1[i]] : -1; // Update element in nums1 with next greater element or -1
        }
        return nums1;
    }
};
