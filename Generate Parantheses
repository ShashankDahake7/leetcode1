class Solution {
public:
    void recursion(int openCount,int closeCount,int n,string s,vector<string> &ans){
        if(openCount==n && closeCount==n){
            ans.push_back(s);
            return;
        }
        if(openCount<n){
            recursion(openCount+1,closeCount,n,s+'(',ans);
        }
        if(openCount>closeCount){
            recursion(openCount,closeCount+1,n,s+')',ans);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s;
        recursion(0,0,n,s,ans);
        return ans;
    }
};
