// Intuition - LONGEST INCREASING SUBSEQUENCE SAME
// Approach - 
// Russian dolls hai unko envelops me dalna hai to sort kardia width wise but agar width same hui kisi ki toh kya kre?
// to hmne HIEGHT ko sort krdia but descending order me an descending order me kyu kara ?
// beacuse hum LIS lga sake uspr agar hum normal karenge to mja n aaega..(Complex hoega)
// Complexity
// Time complexity:RECURSION->exponential (TLE)
// MEMOIZATION-> O(N*N) (TLE)
// TOP-DOWN-> O(N*N) (TLE)
// Binary search ->O(N*LOG(N)) (optimised)
// Space complexity:
// MEMOIZATION-> O(N*N)
// TOP-DOWN-> O(N*N)
// Binary search ->O(N)

// Recursion
class Solution {
public:
    int solve(int n, vector<vector<int>>& envelopes,int curr,int prev)
    {
        if(curr == n)
        {
            return 0;
        }
        int include=0;
        if(prev == -1 or (envelopes[prev][0] < envelopes[curr][0] and 
        envelopes[prev][1] < envelopes[curr][1]))
        {
            // check with and heigth both
            include = 1 + solve(n,envelopes,curr+1,curr);
        }
        int exclude = 0 + solve(n,envelopes, curr+1, prev);
        return max(include,exclude);
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end());
        for(int i=0;i<envelopes.size();i++)
        {
          for(int j=0;j<envelopes[0].size();j++)
          {
            cout<<"envelopes[i][j]"<<envelopes[i][j]<<" ";
          }
            cout<<endl;
        }
             return solve(envelopes.size(), envelopes, 0, -1);
    }
};

// Memoization
class Solution{
public:
  int solve_mem(int n, vector<vector<int>>& envelopes,int curr,int prev,vector<vector<int>> &dp)
    {
        if(curr == n)
        {
            return 0;
        }
        if(dp[curr][prev+1] != -1)
            return dp[curr][prev+1];
        int include=0;
        if(prev == -1 or (envelopes[prev][0] < envelopes[curr][0] and 
        envelopes[prev][1] < envelopes[curr][1]))
        {
            include = 1 + solve_mem(n,envelopes,curr+1,curr,dp);
        }
        int exclude = 0 + solve_mem(n,envelopes, curr+1, prev,dp);
        dp[curr][prev+1] = max(include,exclude);
        return dp[curr][prev+1];
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
            sort(envelopes.begin(),envelopes.end());
            for(int i=0;i<envelopes.size();i++)
            {
                for(int j=0;j<envelopes[0].size();j++)
                {
                    cout<<"envelopes[i][j]"<<envelopes[i][j]<<" ";
                }
                cout<<endl;
             }
             vector<vector<int>> dp(envelopes.size()+1,vector<int>(envelopes.size()+1,-1));
             return solve_mem(envelopes.size(), envelopes, 0, -1,dp);
        }  
};

// Tabulation
class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
          sort(envelopes.begin(),envelopes.end());
          for(int i=0;i<envelopes.size();i++)
          {
              for(int j=0;j<envelopes[0].size();j++)
              {
                  cout<<"envelopes[i][j]"<<envelopes[i][j]<<" ";
              }
              cout<<endl;
          }
        vector<vector<int>> dp(envelopes.size()+1,vector<int>(envelopes.size()+1,0));
        int n=envelopes.size();
        for(int curr = n-1; curr>=0; curr--)
        {
            for(int prev= curr-1; prev>=-1; prev--)
            {
                    int include=0;
                    if(prev == -1 or (envelopes[prev][0] < envelopes[curr][0] and 
                    envelopes[prev][1] < envelopes[curr][1]))
                    {
                        include = 1 + dp[curr+1][curr+1];
                    }
                    int exclude = 0 + dp[curr+1][prev+1];
                    dp[curr][prev+1] = max(include,exclude);
            }
        }
        return dp[0][0];
    }
};

// Binary Search
class Solution {
public:
    static bool cmp(const vector<int>& v1, const vector<int>& v2)
    {
      if(v1[0] == v2[0]) return v1[1] > v2[1];
            return v1[0]<v2[0];
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int n = envelopes.size();
        sort(envelopes.begin(),envelopes.end(),cmp);
        vector<int>arr;
        for(int i =0;i<n;i++)
        {
            if(arr.empty() || arr.back()<envelopes[i][1])
                arr.push_back(envelopes[i][1]);
            else
            {
                int index = lower_bound(arr.begin(),arr.end(),envelopes[i][1]) - arr.begin();
                arr[index] = envelopes[i][1];
            }
        }
        return arr.size();
    }
};
