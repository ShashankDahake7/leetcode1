// Method-1
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;
        while(left < right){
            while((left < right) && (nums[left] % 2 == 0)){
                left++;
            }
            while((left < right) && (nums[right] % 2 != 0)){
                right--;
            }
            if(left < right){
                swap(nums[left], nums[right]);
            }
        }
        return nums;
    }
};

// Method-2
class Solution{
public:
    vector<int>sortArrayByParity(vector<int> & nums){
        int n = nums.size(); 
        if(n == 1){ 
            return nums;
        } 
        int j = 0;
        for(int i = 0 ; i < n ; i++){
            if(nums[i] % 2 == 0){
                swap(nums[i], nums[j]);
                j++;
            }
        }
        return nums;
    }
};

// Method-3
class Solution {
public:
    static bool comparator(int &a  , int & b){
        return a%2 < b%2 ;
    }
    vector<int> sortArrayByParity(vector<int>& nums) {
        int n = nums.size(); 
        if(n==1) return nums;
        sort(nums.begin() , nums.end() , comparator);
        return nums;
    }
};
