class Solution {
public:
    void solve(int idx, int target, vector<int> &candidates, int n, vector<int> &store, vector<vector<int>> &ans) {
        if (target == 0) {
            ans.push_back(store);
            return;
        }
        if (idx >= n || target < 0) {
            return;
        }
        unordered_set<int> seen;
        for (int i = idx; i < n; i++) {
            if (seen.count(candidates[i]) == 1) {
                continue;
            }
            seen.insert(candidates[i]);
            store.push_back(candidates[i]);
            solve(i + 1, target - candidates[i], candidates, n, store, ans);
            store.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int n = candidates.size();
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> store;
        solve(0, target, candidates, n, store, ans);
        return ans;
    }
};
