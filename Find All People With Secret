// DFS
class Solution {
public:
    void dfs(int person, unordered_set<int>& secret_keepers, unordered_set<int>& AlreadyTraversed,
             unordered_map<int, vector<int>>& AdjacencyList) {
        for (int adj_person : AdjacencyList[person]) {
            if (AlreadyTraversed.find(adj_person) != AlreadyTraversed.end()) {
                continue;
            }
            // now it will know the secret
            secret_keepers.insert(adj_person);
            AlreadyTraversed.insert(adj_person);
            // now it is going to tell its meeting companions about the secret
            dfs(adj_person, secret_keepers, AlreadyTraversed, AdjacencyList);
        }
        return;
    };
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        // change the format
        // {xi, yi, ti} -> {ti , xi, yi}
        for (vector<int>& meeting : meetings) {
            int xi = meeting[0];
            int yi = meeting[1];
            int ti = meeting[2];
            meeting = {ti, xi, yi};
        }
        // sort the meetings in the increasing order of their times
        sort(meetings.begin(), meetings.end());
        unordered_set<int> know_secrets = {0, firstPerson};
        // make clusters of groups having the same meeting timings
        vector<vector<vector<int>>> clusters;
        int index = 0;
        while (index < meetings.size()) {
            int time = meetings[index][0];
            vector<vector<int>> curr_cluster = {};
            // get all the meetings having the same time
            while (index < meetings.size() && meetings[index][0] == time) {
                curr_cluster.push_back(meetings[index++]);
            }
            clusters.push_back(curr_cluster);
        }
        // check the clusters
        // for(auto &cluster : clusters){
        //     cout << "cluster: " << endl;
        //     for(vector<int> &meeting : cluster){
        //         cout << meeting[0] << " " << meeting[1] << " " << meeting[2]
        //         << endl;
        //     }
        //     cout << endl << endl;
        // }
        // index = 0;
        unordered_set<int> secret_keepers = {0, firstPerson};
        for (auto& cluster : clusters) {
            // cout << "index: " << index << endl;
            // index++;
            // perform a depth first search from all non-traversed secret keeper nodes
            vector<vector<int>>& curr_cluster = cluster;
            // adjacency list
            unordered_map<int, vector<int>> AdjacencyList;
            vector<int> people = {};
            unordered_set<int> AlreadyTraversed;
            for (vector<int> meeting : curr_cluster) {
                int u = meeting[1];
                int v = meeting[2];
                AdjacencyList[u].push_back(v);
                AdjacencyList[v].push_back(u);
                people.push_back(u);
                people.push_back(v);
            }
            // check the adjacency list
            // for(auto it = AdjacencyList.begin() ; it != AdjacencyList.end() ;
            // ++it){
            //     cout << it->first << ": ";
            //     for(int meeting_companion : it->second){
            //         cout << meeting_companion << " ";
            //     }
            //     cout << endl;
            // }
            for (int person : people) {
                // cout << "person: " << person << endl;
                // depth first search where you mark all the people who are now
                // going to know the secret
                if (secret_keepers.find(person) != secret_keepers.end() && AlreadyTraversed.find(person) == AlreadyTraversed.end()) {
                    AlreadyTraversed.insert(person);
                    dfs(person, secret_keepers, AlreadyTraversed, AdjacencyList);
                }
            }
        }
        vector<int> OutputArr;
        for (int person : secret_keepers) {
            OutputArr.push_back(person);
        }
        sort(OutputArr.begin(), OutputArr.end());
        return OutputArr;
    }
};

// BFS
class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        vector<int> ans;
        ans.push_back(0);
        vector<int> secretTime(n, INT_MAX);
        secretTime[0] = 0;
        secretTime[firstPerson] = 0;
        unordered_map<int, list<pair<int, int>>> adj;
        for (int i = 0; i < meetings.size(); i++) {
            int u = meetings[i][0];
            int v = meetings[i][1];
            int w = meetings[i][2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }
        queue<int> q;
        q.push(0);
        q.push(firstPerson);
        while (!q.empty()) {
            int person1 = q.front();
            q.pop();
            for (auto i : adj[person1]) {
                int person2 = i.first;
                int meetingTime = i.second;
                if (meetingTime >= secretTime[person1] &&
                    meetingTime < secretTime[person2]) {
                    secretTime[person2] = meetingTime;
                    q.push(person2);
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (secretTime[i] < INT_MAX) {
                ans.push_back(i);
            }
        }
        return ans;
    }
};
