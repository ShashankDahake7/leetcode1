// Method-1
class MinStack {
private:
    stack<int> minstack;  // auxiliary stack with minimum element at the top.
    stack<int> mainstack; // main stack that has all elements
public:
    MinStack() {}
    void push(int val){
        if (minstack.empty() || val <= minstack.top()){
            minstack.push(val); // if its the first element or minimum found so far, push it in both stacks
        }
        mainstack.push(val);
    }
    void pop(){
        if (!mainstack.empty()){
            if (minstack.top() == mainstack.top()){// if the top element is the minimum element found so far, remove it from both stacks
                minstack.pop();
            }
            mainstack.pop();
        }
        else{
            return;
        }
    }
    int top(){
        if (!mainstack.empty()){
            return mainstack.top();
        }
        return -1;
    }
    int getMin(){
        if (!minstack.empty()){
            return minstack.top();
        }
        return -1;
    }
};

// Method-2
class node{
public: 
    int data;
    int mini;
    node *next;
    node(int data,int mini){
        this->data = data;
        this->mini = mini;
        this->next = NULL;
    }
};
class MinStack {
public:
    node *head = NULL;
    MinStack() {}
    void push(int val) {
        // insert at head
        // if head is NULL
        if(head == NULL){
            node *newNode = new node(val,val);
            head = newNode;
        }
        else{
            int mini = min(val,head->mini);
            node *newNode = new node(val,mini);
            newNode->next = head;
            head = newNode;
        }
    }
    void pop() {
        head = head -> next;
    }    
    int top() {
        return head -> data;
    }
    int getMin() {
        return head -> mini;
    }
};
