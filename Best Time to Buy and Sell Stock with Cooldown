// Recursion + Memoization
class Solution {
public:
    int solve(int day, int n, int buy, vector<int>& prices, vector<vector<int>>& dp) {
        if (day >= n) {
            return 0;
        }
        if (dp[day][buy] != -1) {
            return dp[day][buy];
        }
        int profit = 0;
        // BUYING
        if (buy) {
            int taken = solve(day + 1, n, 0, prices, dp) - prices[day]; // sell
            int notTaken = solve(day + 1, n, 1, prices, dp); // buy
            profit = max(taken, notTaken);
        }
        // SELLING
        else {
            int sell = prices[day] + solve(day + 2, n, 1, prices, dp); // buy
            int notSell = solve(day + 1, n, 0, prices, dp); // sell
            profit = max(sell, notSell);
        }
        return dp[day][buy] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int buy = 1;
        vector<vector<int>> dp(n, vector<int>(2, -1));
        return solve(0, n, buy, prices, dp);
    }
};

// Bottom-Up
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n < 2){
            return 0;
        }
        vector<int> dp(n, 0);
        dp[0] = 0;
        dp[1] = max(prices[1] - prices[0], 0);
        for(int i = 2; i < n; i++){
            dp[i] = dp[i - 1];
            for(int j = 0; j <= i - 1; j++){
                int todayProfit = prices[i] - prices[j];
                int prevProfit = (j >= 2) ? dp[j - 2] : 0;
                dp[i] = max(dp[i], todayProfit + prevProfit);
            }
        }
        return dp[n - 1];
    }
};
