// Method-1
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> result;
        if (n > 0) {
            grayCodeHelper(n, result);
        } 
        else {
            result.push_back(0);
        }
        return result;
    }
    void grayCodeHelper(int n, vector<int>& res) {
        if (n == 1) {
            res.push_back(0);
            res.push_back(1);
            return;
        }
        grayCodeHelper(n - 1, res);
        int size = res.size() - 1;
        for (int i = size; i >= 0; --i) {
            int num = res[i] | (1 << (n - 1));
            res.push_back(num);
        }
    }
};

// Method-2
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> ans(1 << n);
        for (int i = 0; i < (1 << n); i++)
            ans[i] = i ^ (i >> 1);
        return ans;
    }
};
