/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> getLonelyNodes(TreeNode* root) {
        vector<int> lonelyNodes;
        dfs(root, lonelyNodes);
        return lonelyNodes;
    }
    void dfs(TreeNode* node, vector<int>& lonelyNodes) {
        if (!node) {
            return;
        }
        // If the current node has exactly one child, add the value of that child to lonelyNodes
        if (node->left && !node->right) {
            lonelyNodes.push_back(node->left->val);
        }
        else if (!node->left && node->right) {
            lonelyNodes.push_back(node->right->val);
        }
        // Recursively traverse the left and right subtrees
        dfs(node->left, lonelyNodes);
        dfs(node->right, lonelyNodes);
    }
};
