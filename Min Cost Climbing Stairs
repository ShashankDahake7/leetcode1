// Top-Down Approach
class Solution {
public:
    int helper(vector<int>& cost, int curr,vector<int>&dp)
    {
        if(curr>=cost.size()) return 0;
        if(dp[curr]!=-1) return dp[curr];
        int output1 = cost[curr] + helper(cost,curr+1,dp);
        int output2 = cost[curr] + helper(cost,curr+2,dp);
        return dp[curr] =min(output1,output2);
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n,-1);
        int a= helper(cost,0,dp);
        int b= helper(cost,1,dp);
        return min(a,b);
    }
};

// Bottom-Up Approach
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n);
        for(int i=0;i<n;i++)
        {
            if(i<2)
            {
                dp[i]=cost[i];
            }
            else
            {
                dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
            }
        }
        return min(dp[n-1],dp[n-2]);
    }
};

// Space Optimized 1
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        int first=cost[0];
        int second=cost[1];
        for(int i=2;i<n;i++)
        {
            int curr=cost[i]+min(first,second);
            first=second;
            second=curr;
        }
        return min(first,second);
    }
}; 

// Space Optimized 2
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        for(int i=2;i<n;i++)
        {
            cost[i]+=min(cost[i-1],cost[i-2]);
        }
        return min(cost[n-1],cost[n-2]);
    }
}; 
