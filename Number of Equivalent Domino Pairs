// Method-1
class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        int count =0;
        for(int i = 0; i < dominoes.size(); i++){
            for(int j = i + 1; j < dominoes.size(); j++){
                int a = dominoes[i][0], b = dominoes[i][1];
                int c = dominoes[j][0], d = dominoes[j][1];
                if(((a == c) && (b == d)) || ((a == d) && (b == c))){
                    count++;
                }
            }
        }
        return count;
    }
};

// Method-2
class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        map<vector<int>, int> m;
        int ans = 0;
        for(int i = 0; i < dominoes.size(); i++){
            sort(dominoes[i].begin(), dominoes[i].end());
            m[dominoes[i]]++;
        }
        for(auto i : m){
            int x = i.second;
            if(x >= 2){
                ans += (x * (x - 1) / 2);
            }
        }
        return ans;
    }
};

// Method-3
class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& d) {
        for(int i = 0; i < d.size(); i++){
            if(d[i][0] > d[i][1]){
                swap(d[i][0], d[i][1]);
            }
        }
        sort(d.begin(), d.end());
        int ans = 0;
        int i = 0;
        while(i < d.size()){
            int j = i + 1;
            while((j < d.size()) && (d[j] == d[i])){
                j++;
            }
            if(j == (i + 1)){
                i = j;
                continue;
            }
            ans += (j - i) * (j - i - 1) / 2;
            i = j;
        }
        return ans;
    }
};
