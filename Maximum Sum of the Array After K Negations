// Method-1
class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        while(k > 0){
            if(nums[i] < 0){
                nums[i] *= -1;
            }
            else if(nums[i] > 0){
                i = 0;
                nums[i] *= -1;
            }
            sort(nums.begin(), nums.end());
            k--;
        }
        return accumulate(nums.begin(), nums.end(), 0);
    }
};

// Method-2
class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i = 0; i < n; i++){
            if((nums[i] < 0) && (k > 0)){
                nums[i] *= -1;
                k--;
            }
        }
        long long sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        int x = *min_element(nums.begin(), nums.end());
        if(k & 1){
            sum -= 2 * x;
        }
        return sum;
    }
};
