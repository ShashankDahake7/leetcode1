// Recursion
class Solution {
private:
    int solve(int i, int n, vector<int>& nums) {
        if (i >= n) {
            return 0;
        }
        int pick = nums[i] + solve(i + 2, n, nums);
        int notPick = solve(i + 1, n, nums);
        return max(pick, notPick);
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums[0];
        }
        return solve(0, n, nums);
    }
};

// Recursive + Memoization

class Solution {
private:
    int solve(int i, int n, vector<int>& nums, vector<int>& dp) {
        if (i >= n) {
            return 0;
        }
        if(dp[i] != -1) {
            return dp[i];
        }
        int pick = nums[i] + solve(i + 2, n, nums, dp);
        int notPick = solve(i + 1, n, nums, dp);
        return dp[i] = max(pick, notPick);
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums[0];
        }
        vector<int> dp(n, -1);
        solve(0, n, nums, dp);
        return dp[0];
    }
};

// Tabulation

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1);
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            int pick = nums[i];
            if (i > 1) {
                pick += dp[i - 2];
            }
            int notPick = 0 + dp[i - 1];
            dp[i] = max(pick, notPick);
        }
        return dp[n - 1];
    }
};

// Space Optimized

class Solution{
public:
    int rob(vector<int> &nums){
        int n = nums.size();
        int prev2 = 0, prev = nums[0];
        for (int i = 1; i < n; i++){
            int pick = nums[i] + prev2;
            int notPick = 0 + prev;
            int curr = max(pick, notPick);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
};
