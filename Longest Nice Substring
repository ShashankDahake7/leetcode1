// Method-1
class Solution {
public:
    bool check(string s) {
        for (int i = 0; i < s.size(); i++) {
            if (islower(s[i])) {
                char big = toupper(s[i]);
                if (find(s.begin(), s.end(), big) == s.end()) {
                    return 0;
                }
            } 
            else {
                char small = tolower(s[i]);
                if (find(s.begin(), s.end(), small) == s.end()) {
                    return 0;
                }
            }
        }
        return 1;
    }
    string longestNiceSubstring(string s) {
        if (s.size() == 1) {
            return "";
        }
        int maxlen = 0;
        string ans = "";
        for (int i = 0; i < s.size(); i++) {
            string s1 = "";
            for (int j = i + 1; j < s.size(); j++) {
                s1 = s.substr(i, j - i + 1);
                if (check(s1)) {
                    if (s1.size() > maxlen) {
                        ans = s1;
                        maxlen = s1.size();
                    }
                }
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    string longestNiceSubstring(string s) { 
        return fun(s); 
    }
    string fun(string str) {
        if (str.length() <= 1) {
            return "";
        }
        unordered_set<char> st;
        st.insert(str.begin(), str.end());
        for (int i = 0; i < str.length(); i++) {
            char ch = str[i];
            char temp1 = toupper(ch);
            char temp2 = tolower(ch);
            if (st.find(temp1) == st.end() or st.find(temp2) == st.end()) {
                // the counter part of the ith char is missing can never be in the substring
                string left = fun(str.substr(0, i));
                string right = fun(str.substr(i + 1, str.length()));
                if (left.length() == right.length()) {
                    return left;
                } 
                else if (left.length() > right.length()) {
                    return left;
                } 
                else {
                    return right;
                }
            }
        }
        return str;
    }
};
