class Solution {
public:
    ListNode *getMid(ListNode *head){
        ListNode *slow=head;
        ListNode *fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    ListNode *reverse(ListNode *head){
        ListNode *curr=head;
        ListNode *prev=NULL;
        ListNode *forward=NULL;
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL) return true;
        // find mid
        ListNode *mid=getMid(head);
        // reverse linkedlist after mid
        ListNode *temp=mid->next;
        mid->next=reverse(temp);
        // compare both halves
        ListNode *head1=head;
        ListNode *head2=mid->next;
        while(head2!=NULL){
            if(head2->val!=head1->val){
                return false;
            }
            head1=head1->next;
            head2=head2->next;
        }
        // form the given linkedlist
        temp=mid->next;
        mid->next=reverse(temp);
        return true;
    }
};
