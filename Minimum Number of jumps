// Recursion+Memoization
// Time complexity:O(2^n);
// Space complexity:O(4*n);
class Solution {
public:
    int solve(int n,vector<int>&obstacles,int lane,int pos,vector<vector<int>>&dp)
    {
        if(pos == n-1)
        return 0;
        if(dp[lane][pos]!= -1)
            return dp[lane][pos];
        if(obstacles[pos+1]!= lane)
            return solve(n,obstacles,lane,pos+1,dp
        int ans =1e9;
            for(int k = 1;k<=3;k++)
            {
                if(lane != k && obstacles[pos]!=k)
                {
                    ans = min(ans,1+solve(n,obstacles,k,pos,dp));
                }   
            }
            dp[lane][pos] = ans;
            return ans;
    }
    int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size();
    vector<vector<int>>dp(4,vector<int>(n,-1));
        return solve(n,obstacles,2,0,dp);
    }
};

// Tabulation
// Time Complexity -> O(n)
// Space compllexity -> O(1)
class Solution{
  public:
  int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size();
        // vector<vector<int>>dp(4,vector<int>(n,1e9));
        vector<int>curr(4,1e9);
        vector<int>next(4,1e9);
        next[0] = 0;
        next[1] = 0;
        next[2] = 0;
        next[3] = 0;
        for(int pos = n-2;pos>=0;pos--)
        {
            for(int lane=1;lane<=3;lane++)
            {
                if(obstacles[pos+1]!= lane)
                    curr[lane] =  next[lane];
                else{
                    int ans =1e9;
                    for(int k = 1;k<=3;k++)
                    {
                        if(lane != k && obstacles[pos]!=k)
                        {
                            ans = min(ans,1+next[k]);
                        }   
                    }
                    curr[lane] = ans;
                }
            }
            next = curr;
        }
        return min(curr[2],min(curr[1]+1,curr[3]+1));
    }
};
