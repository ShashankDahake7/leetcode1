// Method-1
class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<pair<int, int>> vec; 
        for(int i = 0; i < mat.size(); i++){
            int val = 0; 
            for(int j = 0; j < mat[0].size(); j++){
                if(mat[i][j] == 1){
                    val++;
                } 
            }
            vec.push_back({val, i});
        }
        sort(vec.begin(), vec.end());
        vector<int> ans;
        for(int i = 0; i < k; i++){
            ans.push_back(vec[i].second);
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    int total_one(vector<int> row){
        int l = 0, r = row.size() - 1;
        int ans = -1;
        while(l <= r){
            int mid = l + (r - l) / 2;
            if(row[mid] == 1){
                ans = mid;
                l = mid + 1;
            }
            else{
                r = mid - 1;
            }
        }
        return ans + 1;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<pair<int,int>> vec;
        for(int i = 0; i < mat.size(); i++){
            int one = total_one(mat[i]);
            vec.push_back({one, i});
        }
        sort(vec.begin(), vec.end());
        vector<int> res;
        for(int i = 0; i < k; i++){
            res.push_back(vec[i].second);
        }
        return res;
    }
};

// Method-3
class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int n=mat.size();
        priority_queue<pair<int, int>> pq;
        for(int i=0; i<k; i++){
            int ones=accumulate(mat[i].begin(), mat[i].end(), 0);
            pq.emplace(ones, i);
        }
        for(int i=k; i<n; i++){
            int ones=accumulate(mat[i].begin(), mat[i].end(), 0);
            int wt=pq.top().first;
            if (ones<wt){               
                pq.emplace(ones, i);
                pq.pop();
            }
        }
        vector<int> ans(k, 0);
        for(int i=k-1; i>=0; i--){
            ans[i]=pq.top().second;
            pq.pop();
        }
        return ans;
    }
};
