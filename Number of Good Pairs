// Method-1
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int cnt=0; 

        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums[i]==nums[j] && i<j)
                cnt++;
            }
        }
        return cnt;
    }
};

// Method-2
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        unordered_map<int, int> m;
        int ans = 0;
        for(int i : nums){
            ans += m[i];
            m[i]++;
        }
        return ans;
    }
};

// Method-3
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        map<int,int> mp;
        for(auto it : nums){
            mp[it]++;
        }        
        for(auto it : mp){ 
            ans += (it.second - 1) * (it.second) / 2;
        }
        return ans;
    }
};
