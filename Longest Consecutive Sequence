// Method-1
class Solution {
public:
    int longestConsecutive(vector<int>& nums) { 
        int n = nums.size();
        if (n == 0) {
            return 0;
        }
        sort(nums.begin(), nums.end());
        int ls = INT_MIN;
        int count = 0;
        int lg = 1;
        for (int i = 0; i < n; i++){
            if (nums[i] - 1 == ls){
                count++;
                ls = nums[i];
            }
            else if (nums[i] != ls){
                count = 1;
                ls = nums[i];
            }
            lg = max(count, lg);
        }
        return lg;
    }
};

// Method-2
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> s(nums.begin(), nums.end());
        int longest = 0;
        for (auto num : s) {
            if(s.find(num - 1) == s.end()){
                int currNum = num;
                int currSequence = 1;
                while(s.find(currNum + 1) != s.end()) {
                    currNum++;
                    currSequence++;
                }
                longest = max(longest, currSequence);
            }
        }
        return longest;
    }
};
