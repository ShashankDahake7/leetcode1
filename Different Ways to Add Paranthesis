// Recursion
class Solution {
public:
    vector<int> diffWaysToCompute(string expression) {
        vector<int> ans = findWays(expression, 0, expression.length() - 1);
        return ans;
    }
    vector<int> findWays(string expression, int i, int j) {
        if (checkNoOp(expression.substr(i, j - i + 1))) {
            vector<int> v;
            v.push_back(stoi(expression.substr(i, j - i + 1)));
            return v;
        }
        vector<int> val;
        for (int k = i; k <= j; k++) {
            char ch = expression[k];
            if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                vector<int> l = findWays(expression, i, k - 1);
                vector<int> r = findWays(expression, k + 1, j);
                vector<int> v = findValue(l, r, ch);
                for (int i = 0; i < v.size(); i++)
                    val.push_back(v[i]);
            }
        }
        return val;
    }
    bool checkNoOp(string s) {
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')
                return false;
        }
        return true;
    }
    vector<int> findValue(vector<int> l, vector<int> r, char op) {
        vector<int> v;
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < r.size(); j++) {
                if (op == '+')
                    v.push_back(l[i] + r[j]);
                else if (op == '-')
                    v.push_back(l[i] - r[j]);
                else if (op == '*')
                    v.push_back(l[i] * r[j]);
                else if (op == '/')
                    v.push_back(l[i] / r[j]);
            }
        }
        return v;
    }
};

// Top-Down
class Solution {
public:
    vector<int> diffWaysToCompute(string expression) {
        unordered_map<string, vector<int>> memo;
        return findWays(expression, 0, expression.length() - 1, memo);
    }
    vector<int> findWays(string expression, int i, int j, unordered_map<string, vector<int>>& memo) {
        string subexpr = expression.substr(i, j - i + 1);
        if (memo.find(subexpr) != memo.end()) {
            return memo[subexpr];
        }
        if (checkNoOp(subexpr)) {
            vector<int> v;
            v.push_back(stoi(subexpr));
            // Memoize the result
            memo[subexpr] = v;
            return v;
        }
        vector<int> val;
        for (int k = i; k <= j; k++) {
            char ch = expression[k];
            if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                vector<int> l = findWays(expression, i, k - 1, memo);
                vector<int> r = findWays(expression, k + 1, j, memo);
                vector<int> v = findValue(l, r, ch);
                for (int i = 0; i < v.size(); i++)
                    val.push_back(v[i]);
            }
        }
        // Memoize the result
        memo[subexpr] = val;
        return val;
    }
    bool checkNoOp(string s) {
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')
                return false;
        }
        return true;
    }
    vector<int> findValue(vector<int> l, vector<int> r, char op) {
        vector<int> v;
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < r.size(); j++) {
                if (op == '+')
                    v.push_back(l[i] + r[j]);
                else if (op == '-')
                    v.push_back(l[i] - r[j]);
                else if (op == '*')
                    v.push_back(l[i] * r[j]);
                else if (op == '/')
                    v.push_back(l[i] / r[j]);
            }
        }
        return v;
    }
};
