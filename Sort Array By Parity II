// Method-1
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        vector<int> even;
        vector<int> odd;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 0){
                even.push_back(nums[i]);
            }
            else{
                odd.push_back(nums[i]);
            }
        }
        int k = 0, l = 0;
        vector<int> ans;
        for(int i = 0; i < nums.size(); i++){
            if(i % 2 == 0){
                ans.push_back(even[k++]);
            }
            else{
                ans.push_back(odd[l++]);
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        vector<int> ans(nums.size());
        int even = 0, odd = 1;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 0){
                ans[even] = nums[i];
                even += 2;
            }
            else if(nums[i] % 2 != 0){
                ans[odd] = nums[i];
                odd += 2;
            }
        }
        return ans;
    }
};

// Method-3
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        int n=nums.size();
        int i=0,j=1;
        while(i<n && j<n)
        {
            while(i<n && nums[i]%2==0)
                i+=2;
            while(j<n && nums[j]%2!=0)
                j+=2;
            if(i<n)
                swap(nums[i],nums[j]);
            i+=2;j+=2;
        }
        return nums;
    }
};
