// Method-1
class Solution {
public:
    void dfs(vector<int>& vis, vector<vector<int>> adj, int i) {
        vis[i] = 1;
        for (auto i : adj[i]) {
            if (vis[i] == 0) {
                vis[i] = 1;
                dfs(vis, adj, i);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& num) {
        int n = num.size();
        vector<vector<int>> adj(n);
        for (int i = 0; i < num.size(); i++) {
            for (int j = 0; j < num[i].size(); j++) {
                if (i != j && num[i][j] == 1) {
                    adj[i].push_back(j);
                }
            }
        }
        vector<int> vis(n, 0);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                dfs(vis, adj, i);
                count++;
            }
        }
        return count;
    }
};

// Method-2
class Solution {
public:
    void bfs(vector<int>& vis, vector<vector<int>> adj, int i) {
        queue<int> q;
        q.push(i);
        vis[i] = 1;
        while(!q.empty()){
            int f = q.front();
            q.pop();
            for(auto x : adj[f]){
                if(!vis[x]){
                    vis[x] = 1;
                    q.push(x);
                }
            }
        }
    }
    int findCircleNum(vector<vector<int>>& num) {
        int n = num.size();
        vector<vector<int>> adj(n);
        for (int i = 0; i < num.size(); i++) {
            for (int j = 0; j < num[i].size(); j++) {
                if (i != j && num[i][j] == 1) {
                    adj[i].push_back(j);
                }
            }
        }
        vector<int> vis(n, 0);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                count++;
                bfs(vis, adj, i);
            }
        }
        return count;
    }
};
