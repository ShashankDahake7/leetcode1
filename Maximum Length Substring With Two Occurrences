// Method-1
class Solution {
public:
    int maximumLengthSubstring(string s) {
        int n = s.size();
        int ans = 0;
        for(int i = 0; i < n; i++){
            unordered_map<int, int> mp;
            for(int j = i; j < n; j++){
                mp[s[j]]++;
                if(mp[s[j]] > 2){
                    break;
                }
                ans = max(ans, j - i + 1);
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    int maximumLengthSubstring(string s) {
        int n = s.size(), ans = 0, begin = 0, end = 0;
        map<char, int> mp;
        while (end < n) {
            mp[s[end]]++;
            while (mp[s[end]] == 3)
                mp[s[begin++]]--;
            ans = max(ans, end - begin + 1);
            end++;
        }
        return ans;
    }
};
