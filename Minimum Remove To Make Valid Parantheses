// Method-1
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        stack<int> st;
        unordered_set<int> index;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '('){
                st.push(i);
            }
            else if(s[i] == ')'){
                if(st.empty()){
                    index.insert(i);
                }
                else{
                    st.pop();
                }
            }
        }
        while(!st.empty()){
            index.insert(st.top());
            st.pop();
        }
        string ans = "";
        for(int i = 0; i < s.size(); i++){
            if(index.find(i) == index.end()){
                ans.push_back(s[i]);
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        int n = s.size();
        int open = 0;
        string ans = "";
        for(int i = 0; i < n; i++){
            if(s[i] >= 'a' && s[i] <= 'z'){
                ans.push_back(s[i]);
            }
            else if(s[i] == '('){
                open++;
                ans.push_back(s[i]);
            }
            else if(open > 0){
                open--;
                ans.push_back(s[i]);
            }
        }
        int close = 0;
        string finalAns = "";
        for(int i = ans.length() - 1; i >= 0; i--){
            if(ans[i] >= 'a' && ans[i] <= 'z'){
                finalAns.push_back(ans[i]);
            }
            else if(ans[i] == ')'){
                close++;
                finalAns.push_back(ans[i]);
            }
            else if(close > 0){
                close--;
                finalAns.push_back(ans[i]);
            }
        }
        reverse(finalAns.begin(), finalAns.end());
        return finalAns;
    }
};
