// Brute Force
int combinationSum4(vector<int>& nums, int target) {
	if(target == 0) return 1;
	int ans = 0;
	for(auto& num : nums)
		// pick an element if it is less than target to be achieved and recurse for remaining amount.
		if(num <= target) ans += combinationSum4(nums, target - num);
	return ans;  
}

// RECURSION + MEMOIZATION 
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
	vector<int> dp(target + 1, -1);  // at start, none of the values are computed
	return helper(nums, target, dp);
}
    int helper(vector<int>& nums, int target, vector<int>& dp){
        if(target == 0) return 1;  // base condition
        if(dp[target] != -1) return dp[target];  // if already computed for this value
        // recursive code starts -
        dp[target] = 0;
        // check for every element of nums. An element can only be taken if it is less than target.
        // If an element is chosen, recurse for remaining value.
        for(auto& num : nums) 
            if(num <= target) dp[target] += helper(nums, target - num, dp);
        return dp[target];
    }
};

// TABULATION 
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        vector<uint> dp(target + 1); dp[0] = 1;
        // start filling the dp array from bottom, i.e curTarget = 1 till target.
        for (int curTarget = 1; curTarget <= target; curTarget++) 
            for (auto& num : nums)     // check for all elements from nums
                if (num <= curTarget)  // an element will only be taken if it is less than target to be achieved
                    // the optimal answer(no. of combination) of remaining value is added to dp[curTarget]
                    dp[curTarget] += dp[curTarget - num];   
        return dp[target];
    }
};

// Optimized
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        sort(begin(nums), end(nums));
        vector<uint> dp(target + 1); dp[0] = 1;
        for (int curTarget = 1; curTarget <= target; curTarget++) 
            for (auto& num : nums) 
                if (num <= curTarget)  dp[curTarget] += dp[curTarget - num];
                else break;
        return dp[target];
    }
};
