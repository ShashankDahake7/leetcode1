// Recursion
class Solution {
public:
    int solve(vector<int>& prices, int index, bool buy, int limit){
        if(index >= prices.size()) return 0;
        int profit = 0;
        if(buy && limit < 2){
            int choose = -prices[index] + solve(prices, index+1, 0, limit+1);
            int skip = 0 + solve(prices, index+1, 1, limit);
            profit = max(choose, skip);
        }
        else if(buy == 0){
            int choose = prices[index] + solve(prices, index+1, 1, limit);
            int skip = 0 + solve(prices, index+1, 0, limit);
            profit = max(choose, skip);
        }
        return profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int index = 0;
        bool buy = 1;
        int limit = 0;
        return solve(prices,index,buy,limit);
    }
};

// Recursion+Memoization
class Solution {
public:
    int solveMem(vector<int>& prices, int index, bool buy, int limit, vector<vector<vector<int>>> &dp){
        if(index >= prices.size()) return 0;
        if(dp[index][buy][limit] != -1){
            return dp[index][buy][limit];
        }
        int profit = 0;
        if(buy && limit < 2){
            int choose = -prices[index] + solveMem(prices, index+1, 0, limit+1, dp);
            int skip = 0 + solveMem(prices, index+1, 1, limit, dp);
            profit = max(choose, skip);
        }
        else if(buy == 0){
            int choose = prices[index] + solveMem(prices, index+1, 1, limit, dp);
            int skip = 0 + solveMem(prices, index+1, 0, limit, dp);
            profit = max(choose, skip);
        }
        return dp[index][buy][limit] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int index = 0;
        bool buy = 1;
        int limit = 0;
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        return solveMem(prices, index, buy, limit, dp);
    }
};

// Tabulation

class Solution {
public:
    int solveTab(vector<int>& prices){
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));
        for(int index = n-1; index >= 0; index--){
            for(int buy = 0; buy <= 1; buy++){
                for(int limit = 2; limit >= 0; limit--){
                    int profit = 0;
                    if(buy && limit < 2){
                        int choose = -prices[index] + dp[index+1][0][limit+1];
                        int skip = 0 + dp[index+1][1][limit];
                        profit = max(choose, skip);
                    }
                    else if(buy == 0){
                        int choose = prices[index] + dp[index+1][1][limit];
                        int skip = 0 + dp[index+1][0][limit];
                        profit = max(choose, skip);
                    }
                    dp[index][buy][limit] = profit;
                }
            }
        }
        return dp[0][1][0];
    }
    int maxProfit(vector<int>& prices) {
        return solveTab(prices);
    }
};

// Space Optimized
class Solution {
public:
    int solveSO(vector<int> &prices){
        int n = prices.size();
        vector<vector<int>> curr(2, vector<int>(3, 0));
        vector<vector<int>> next(2, vector<int>(3, 0));
        for(int index = n-1; index >= 0; index--){
            for(int buy = 0; buy <= 1; buy++){
                for(int limit = 2; limit >= 0; limit--){
                    int profit = 0;
                    if(buy && limit < 2){
                        int choose = -prices[index] + next[0][limit+1];
                        int skip = 0 + next[1][limit];
                        profit = max(choose, skip);
                    }
                    else if(buy == 0){
                        int choose = prices[index] + next[1][limit];
                        int skip = 0 + next[0][limit];
                        profit = max(choose, skip);
                    }
                    curr[buy][limit] = profit;
                }
            }
            next = curr;
        }
        return curr[1][0];
    }
    int maxProfit(vector<int>& prices) {
        return solveSO(prices);
    }
};
