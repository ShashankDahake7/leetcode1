class Solution {
public:
    bool isValid(int i, int j, int rows, int cols) {
        return (i >= 0 && j >= 0 && i < rows && j < cols);
    }
    int countNeighbors(vector<vector<int>>& board, int i, int j) {
        int m = board.size(), n = board[0].size();
        int di[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int dj[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
        int count = 0;
        for (int x = 0; x < 8; x++) {
            int ni = i + di[x];
            int nj = j + dj[x];
            if (isValid(ni, nj, m, n) && (board[ni][nj] == 1 || board[ni][nj] == 2)) {
                count++;
            }
        }
        return count;
    }
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size(), n = board[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int neighborCount = countNeighbors(board, i, j);
                if (board[i][j] == 1) {
                    if (!(neighborCount == 2 || neighborCount == 3)) {
                        board[i][j] = 2;
                    }
                } else {
                    if (neighborCount == 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 0;
                }
                if (board[i][j] == 3) {
                    board[i][j] = 1;
                }
            }
        }
    }
};
