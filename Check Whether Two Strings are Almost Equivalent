// Method-1
class Solution {
public:
	bool checkAlmostEquivalent(string word1, string word2) {
		unordered_map<char, int> m;
		for(int i = 0; i < word1.size(); i++){
			m[word1[i]]++;
		}
		for(int i = 0; i < word2.size(); i++){
			m[word2[i]]--;
		}
		for(auto i : m){
			if(abs(i.second) > 3){
				return false;
			}
		}
		return true;
	}
};

// Method-2
class Solution {
public:
    bool checkAlmostEquivalent(string word1, string word2) {
        int a1[26] = {0};
        int a2[26] = {0};
        for (char x : word1) {
            a1[x - 'a']++;
        }
        for (char x : word2) {
            a2[x - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (abs(a1[i] - a2[i]) > 3)
                return false;
        }
        return true;
    }
};
