// Recursion
class Solution {
public:
    bool solve(int ind, int openingBracket, string& s) {
        if (ind == s.size()){
            return (openingBracket == 0);
        }
        bool ans = false;
        if (s[ind] == '*') {
            ans |= solve(ind + 1, openingBracket + 1, s); // Add '('
            if (openingBracket) {
                ans |= solve(ind + 1, openingBracket - 1, s); // Add ')'
            }
            ans |= solve(ind + 1, openingBracket, s); // Add Nothing
        } 
        else {
            if (s[ind] == '(') {
                ans = solve(ind + 1, openingBracket + 1, s);
            } 
            else {
                if (openingBracket) {
                    ans = solve(ind + 1, openingBracket - 1, s);
                }
            }
        }
        return ans;
    }
    bool checkValidString(string s) { 
        return solve(0, 0, s); 
    }
};

// Memoization
class Solution {
public:
    bool solve(int ind, int openingBracket, const string& s, vector<vector<int>>& dp) {
        if (ind == s.size()){
            return (openingBracket == 0);
        }
        if (dp[ind][openingBracket] != -1) {
            return dp[ind][openingBracket];
        }
        bool ans = false;
        if (s[ind] == '*') {
            ans |= solve(ind + 1, openingBracket + 1, s, dp); // Add '('
            if (openingBracket) {
                ans |= solve(ind + 1, openingBracket - 1, s, dp); // Add ')'
            }
            ans |= solve(ind + 1, openingBracket, s, dp); // Add Nothing
        } 
        else {
            if (s[ind] == '(') {
                ans = solve(ind + 1, openingBracket + 1, s, dp);
            } 
            else {
                if (openingBracket) {
                    ans = solve(ind + 1, openingBracket - 1, s, dp);
                }
            }
        }
        dp[ind][openingBracket] = ans ? 1 : 0;
        return ans;
    }
    bool checkValidString(string s) {
        int n = s.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
        return solve(0, 0, s, dp); 
    }
};

// Tabulation
class Solution {
public:
    bool checkValidString(string s) {
        vector<vector<int>> dp(s.size() + 1, vector<int>(s.size() + 1, 0));
        dp[s.size()][0] = 1;
        for (int ind = s.size() - 1; ind >= 0; ind--) {
            for (int openingBracket = 0; openingBracket < s.size(); openingBracket++) {
                bool ans = false;
                if (s[ind] == '*') {
                    ans |= dp[ind + 1][openingBracket + 1];
                    if (openingBracket)
                        ans |= dp[ind + 1][openingBracket - 1];
                    ans |= dp[ind + 1][openingBracket];
                } else {
                    if (s[ind] == '(') {
                        ans |= dp[ind + 1][openingBracket + 1];
                    } else {
                        if (openingBracket)
                            ans |= dp[ind + 1][openingBracket - 1];
                    }
                }
                dp[ind][openingBracket] = ans;
            }
        }
        return dp[0][0];
    }
};

// Stack
class Solution {
public:
    bool checkValidString(string s) {
        stack<int> open, star;
        int len = s.size();
        for(int i = 0; s[i] != '\0'; i++){
            if(s[i] == '('){
                open.push(i);
            }
            else if(s[i] == '*'){
                star.push(i);
            }
            else{
                if(!open.empty()){
                    open.pop();
                }
                else if(!star.empty()){
                    star.pop();
                }
                else{
                    return false;
                }
            }
        }
        while(!open.empty()){
            if(star.empty()){
                return false;
            }
            else if(open.top() < star.top()){
                open.pop();
                star.pop();
            }
            else{
                return false;
            }
        }
        return true;
    }
};
