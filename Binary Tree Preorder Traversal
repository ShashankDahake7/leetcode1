// Method-1
class Solution {
public:
    void preorder(TreeNode*&root,vector<int>&pre){
        if(root){
            pre.push_back(root->val);
            preorder(root->left,pre);
            preorder(root->right,pre);
        }
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> pre;
        preorder(root,pre);
        return pre;
    }
};

// Method-2
class Solution {
public:
    TreeNode* rightMostFinder(TreeNode*cur,TreeNode*root){
        while(cur->right&&cur->right!=root){
            cur=cur->right;
        }
        return cur;
    }
    vector<int> preorderTraversal(TreeNode* root) {
        TreeNode*cur=root;
        vector<int>ans;
        while(cur){
            TreeNode*leftNode=cur->left;
            if(leftNode){
                TreeNode*RightMost=rightMostFinder(leftNode,cur);
                if(RightMost->right){
                    RightMost->right=nullptr;
                    cur=cur->right;
                }
                else{
                    RightMost->right=cur;
                    ans.push_back(cur->val);
                    cur=cur->left;
                }
            }
            else{
                ans.push_back(cur->val);
                cur=cur->right;
            }
        }
        return ans;
    }
};
