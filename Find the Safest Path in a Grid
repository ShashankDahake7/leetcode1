class Solution {
public:
    vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> minDist(n, vector<int>(n, INT_MAX));
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.push({i, j});
                    minDist[i][j] = 0;
                }
            }
        }
        while (!q.empty()) {
            auto [i, j] = q.front();
            q.pop();
            for (auto& dir : directions) {
                int newX = i + dir[0];
                int newY = j + dir[1];
                if (newX >= 0 && newX < n && newY >= 0 && newY < n && minDist[newX][newY] == INT_MAX) {
                    minDist[newX][newY] = minDist[i][j] + 1;
                    q.push({newX, newY});
                }
            }
        }
        priority_queue<pair<int, pair<int, int>>> pq;
        pq.push({minDist[0][0], {0, 0}});
        vector<vector<int>> maxSafe(n, vector<int>(n, -1));
        maxSafe[0][0] = minDist[0][0];
        while (!pq.empty()) {
            auto [d, pos] = pq.top();
            pq.pop();
            int i = pos.first;
            int j = pos.second;
            if (i == n - 1 && j == n - 1) {
                return d;
            }
            for (auto& dir : directions) {
                int newX = i + dir[0];
                int newY = j + dir[1];
                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {
                    int newSafe = min(d, minDist[newX][newY]);
                    if (newSafe > maxSafe[newX][newY]) {
                        maxSafe[newX][newY] = newSafe;
                        pq.push({newSafe, {newX, newY}});
                    }
                }
            }
        }
        return -1;
    }
};
