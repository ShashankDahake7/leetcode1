// Method-2
class Solution {
public:
    int closetTarget(vector<string>& words, string target, int startIndex) {
        if (words[startIndex] == target) {
            return 0;
        }
        int n = words.size(), ans = INT_MAX;
        // GO FROM [start-> (n - 1)-> (0) -> (start - 1)]
        // MAKING CYLCE FROM RIGHT
        int currIdx = (startIndex + 1 == n) ? 0 : startIndex + 1;
        int steps = 1;
        bool found = false;
        while(currIdx != startIndex) {
            if (words[currIdx] == target) { 
                found = true; 
                break;
            }
            currIdx = (currIdx + 1) % n;
            steps++;
        }
        if (found) {
            ans = min(ans, steps);
        }
        // GO FROM [start -> (0) -> (n - 1) -> (start + 1)]
        // MAKING CYCLE FROM LEFT
        steps = 1;
        found = false;
        currIdx = (startIndex - 1 < 0)? n - 1 : startIndex - 1;
        while(currIdx != startIndex) {
            if (words[currIdx] == target) { 
                found = true;
                break;
            }
            currIdx = (currIdx - 1 + n) % n;
            steps++;
        }
        if (found) {
            ans = min(ans, steps);
        }
        return (ans == INT_MAX? -1 : ans);        
    }
};

// Method-2
class Solution {
public:
    int closetTarget(vector<string>& words, string target, int startIndex) {
        vector<int> idx;
        for(int i = 0; i < words.size(); i++){
            if(words[i] == target){
                idx.push_back(i);
            }
        }
        if(idx.size() == 0){
            return -1;
        }
        int n = words.size(), ans = n;
        for(int i : idx){
            ans = min({ans, abs(i - startIndex), n - abs(i - startIndex)});
        }
        return ans;
    }
};
