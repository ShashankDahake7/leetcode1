// Method-1
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int minLen = INT_MAX;
        int sum = 0;
        int left = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            while (sum >= target) {
                minLen = min(minLen, i - left + 1);
                sum -= nums[left++];
            }
        }
        return minLen == INT_MAX ? 0 : minLen;
    }
};

// Method-2
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int i = 0, sum = nums[0];
        if (sum >= target) {
            return 1;
        }
        int n = nums.size();
        if (accumulate(nums.begin(), nums.end(), 0) < target) {
            return 0;
        }
        int mini = INT_MAX;
        int j = i + 1;
        while (j <= n + 1) {
            if (sum >= target) {
                mini = min(j - i, mini);
                sum -= nums[i];
                i++;
            } 
            else {
                if (j < n) {
                    sum += nums[j];
                }
                j++;
            }
        }
        return mini;
    }
};
