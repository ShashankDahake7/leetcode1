// T->O(nlogn x 2^n) + S->O(n) [Recursion Stack Space]
class Solution {
public:
	int maxh(int i,int prev,vector<vector<int>>& cubo,int n){
		if(i==n) return 0;
		int pick=INT_MIN;
		if(prev==-1 || (cubo[prev][1]<=cubo[i][1] && cubo[prev][2]<=cubo[i][2])){
			pick=cubo[i][2]+maxh(i+1,i,cubo,n);
		}
		int notpick=maxh(i+1,prev,cubo,n);
		return max(pick,notpick);
	}
	int maxHeight(vector<vector<int>>& cubo) {
		int n=cubo.size();
		for(auto &i:cubo) sort(i.begin(),i.end());
		sort(cubo.begin(),cubo.end());
		return maxh(0,-1,cubo,n);
	}
};

// Method - 2 [Memoization]
// T->O(n^2) + S->O(n^2) + O(n) [Recursion Stack Space]
class Solution {
public:
	int maxh(int i,int prev,vector<vector<int>>& cubo,int n,vector<vector<int>>& dp){
		if(i==n) return 0;
		if(dp[i][prev+1]!=-1) return dp[i][prev+1];
		int pick=INT_MIN;
		if(prev==-1 || (cubo[prev][1]<=cubo[i][1] && cubo[prev][2]<=cubo[i][2])){
			pick=cubo[i][2]+maxh(i+1,i,cubo,n,dp);
		}
		int notpick=maxh(i+1,prev,cubo,n,dp);
		return dp[i][prev+1]=max(pick,notpick);
	}
	int maxHeight(vector<vector<int>>& cubo) {
		int n=cubo.size();
		for(auto &i:cubo) sort(i.begin(),i.end());
		sort(cubo.begin(),cubo.end());
		vector<vector<int>> dp(n,vector<int>(n+1,-1));
		return maxh(0,-1,cubo,n,dp);
	}
};

// Method - 3 [Tabulation]
// T->O(n^2) + S->O(n^2)
class Solution {
public:
	int maxHeight(vector<vector<int>>& cubo) {
		int n=cubo.size();
		for(auto &i:cubo) sort(i.begin(),i.end());
		sort(cubo.begin(),cubo.end());
		vector<vector<int>> dp(n+1,vector<int>(n+1,0));
		for(int i=n-1;i>=0;i--){
			for(int prev=n-1;prev>=-1;prev--){
				int pick=INT_MIN;
				if(prev==-1 || (cubo[prev][1]<=cubo[i][1] && cubo[prev][2]<=cubo[i][2])){
					pick=cubo[i][2]+dp[i+1][i+1];
				}
				int notpick=dp[i+1][prev+1];
				dp[i][prev+1]=max(pick,notpick);
			}
		}
		return dp[0][0];
	}
};

//Method - 4 [SpaceOptimization]
// T->O(n^2) + S->O(n)
class Solution {
public:
	int maxHeight(vector<vector<int>>& cubo) {
		int n=cubo.size();
		for(auto &i:cubo) sort(i.begin(),i.end());
		sort(cubo.begin(),cubo.end());
		vector<int> last(n+1,0),curr(n+1,0);
		for(int i=n-1;i>=0;i--){
			for(int prev=n-1;prev>=-1;prev--){
				int pick=INT_MIN;
				if(prev==-1 || (cubo[prev][1]<=cubo[i][1] && cubo[prev][2]<=cubo[i][2])){
					pick=cubo[i][2]+last[i+1];
				}
				int notpick=last[prev+1];
				curr[prev+1]=max(pick,notpick);
			}
			last=curr;
		}
		return last[0];
	}
};
