// Method-1
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        int prod = 1;
        int count = 0;
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0)
                prod = prod * nums[i];
            else
                count++;
        }
        if (count > 1) {
            for (int i = 0; i < n; i++) {
                ans.push_back(0);
            }
        } 
        else {
            for (int i = 0; i < n; i++) {
                if (nums[i] == 0)
                    ans.push_back(prod);
                else if (count == 0)
                    ans.push_back(prod / nums[i]);
                else
                    ans.push_back(0);
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;
        // Left side Product
        int left[n];
        left[0] = 1;
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        // Right side Product
        int right[n];
        right[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        // Answer
        for (int i = 0; i < n; i++) {
            ans.push_back(left[i] * right[i]);
        }
        return ans;
    }
};
