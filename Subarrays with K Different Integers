// Method-1
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size(), count = 0;
        for(int i = 0; i < n; i++){
            unordered_set<int> st;
            for(int j = i; j < n; j++){
                st.insert(nums[j]);
                if(st.size() == k){
                    count++;
                }
            }
        }
        return count++;
    }
};

// Method-2
class Solution {
public:
    int solve(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> map;
        int count = 0, i = 0, j = 0;
        while (j < n) {
            map[nums[j]]++;
            while (map.size() > k) {
                map[nums[i]]--;
                if (map[nums[i]] == 0) {
                    map.erase(nums[i]);
                }
                i++;
            }
            count += j - i + 1;
            j++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return solve(nums, k) - solve(nums, k - 1);
    }
};
