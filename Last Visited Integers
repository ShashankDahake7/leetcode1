// Method-1
class Solution {
public:
    vector<int> lastVisitedIntegers(vector<string>& words) {
        vector<int> output; 
        vector<int> nums;
        int k = 0
        for(int i = 0; i < words.size(); i++) {
            if(words[i] != "prev") {
                nums.insert(begin(nums), stoi(words[i]));
            }
            else {
                if(i > 0 && words[i - 1] == "prev") {
                    k += 1;
                }
                else {
                    k = 1;
                }
                if(nums.size() > 0 && k - 1 < nums.size()) {
                    output.push_back(nums[k - 1]);
                }
                else {
                    output.push_back(-1);
                }
            }   
        }
        return output;
    }
};

// Method-2
class Solution {
public:
    vector<int> lastVisitedIntegers(vector<string>& words) {
        vector<int> output;
        vector<int> nums;   
        int k = 0;         
        for(int i = 0; i < words.size(); i++) {
            if(words[i] != "prev") {
                nums.push_back(stoi(words[i]));          
            }
            else {
                if(i > 0 && words[i - 1] == "prev") {
                    k += 1;
                }
                else {
                    k = 1;
                }
                if(nums.size() > 0 && k-1 < nums.size()) {
                    int idx = nums.size() - k;
                    if(idx >= 0 && idx < nums.size()){
                        output.push_back(nums[idx]);
                    }
                }
                else {
                    output.push_back(-1);
                }
            }
        }
        return output;
    }
};
