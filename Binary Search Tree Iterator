// Method-1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class BSTIterator {
    stack<TreeNode*> st;
public:
    void pushBST(TreeNode* root) {
        while (root) {
            st.push(root);
            root = root->left;
        }
    }
    BSTIterator(TreeNode* root) { 
        pushBST(root); 
    }
    int next() {
        TreeNode* temp = st.top();
        st.pop();
        pushBST(temp->right);
        return temp->val;
    }
    bool hasNext() { 
        return !st.empty(); 
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();

// Method-2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    TreeNode* rt;
    //convert tree to double linked list
    void DLL(TreeNode* root, TreeNode *&prev){
        if(!root)
            return;
        DLL(root->right, prev);
        if(prev){
            root->right = prev;
            prev->left = root;
        }
        prev = root;
        DLL(root->left, prev);
    }
    BSTIterator(TreeNode* root) {
        rt = root;
        TreeNode* prev = NULL;
        DLL(rt, prev);
        rt = prev;
    }
    int next() {
        int val = rt->val;
        rt = rt->right;
        return val;
    }    
    bool hasNext() {
        if(!rt)
            return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
 */
